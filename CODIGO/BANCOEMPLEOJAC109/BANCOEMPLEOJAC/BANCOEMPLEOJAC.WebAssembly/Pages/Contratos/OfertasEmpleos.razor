@page "/ofertasempleos"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDistanciaLatLonServicio distancialatlonservicio
@inject IPropuestaEmpleoServicio propuestaempleoServicio
@inject IPerfilCargoServicio perfilcargoServicio
@inject IJacServicio jacServicio
@inject NavigationManager _navServicio


<div class="row justify-content-center mt-3 mb-4">

    <div class="col-sm-6 col-md-8 col-xl-9">
        <div class="input-group mb-3">
            <input type="text" class="form-control" placeholder="Buscar producto..." @bind-value="buscar">
                <button class="btn btn-outline-secondary" type="button" @onclick="(async () => await  ObtenerCatalogo())">
                    <i class="oi oi-magnifying-glass"></i>
            </button>
        </div>
    </div>
</div>



<div class="row">
    <div class="col-sm-3">


        <div class="card">
            <div class="card-header text-white bg-dark">
                Perfiles o Cargos<br />
                Locales : @Local<br />
                Externos : @Externo
            </div>
            <div class="card-body">
                @if (listaCategoria != null)
                {
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="categoria" id="Todos" value="0"
                               @onchange="RadioSeleccion"
                               checked=@(categoriaSeleccionada.Equals(0))>
                        <label class="form-check-label" for="Todos">
                            Todos
                        </label>
                    </div>
                    @foreach (var item in listaCategoria)
                    {
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="categoria" id="@item.IdPerfilCargo" value="@item.IdPerfilCargo"
                                   @onchange="RadioSeleccion"
                                   checked=@(categoriaSeleccionada.Equals(item.IdPerfilCargo))>
                            <label class="form-check-label" for="@item.IdPerfilCargo">
                                @item.Descripcion
                            </label>
                        </div>

                    }
                }
                else
                {
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                }
            </div>

        </div>

    </div>

    <div class="col-sm-9">
        <div class="row gx-4 row-cols-1 row-cols-md-3 row-cols-xl-4 justify-content-start">
            @if (listaProducto != null)
            {
                foreach (var item in listaProducto)
                {
                    <div class="col mb-5">
                        <div class="card h-100">
                            <!-- Sale badge-->
                            @if (DateTime.Now < item.FechaHoraCreacion.Value.AddDays(30))
                            {
                                <div class="badge bg-primary text-white position-absolute" style="top: 0.5rem; right: 0.5rem">Nuevo</div>
                            }

                            <!-- Product details-->
                            <div class="card-body p-4">
                                <div class="text-center">
                                    <!-- Product name-->
                                    <h5 class="fw-bolder">@item.Nombre</h5>
                                    <!-- Product price-->
                                    <span>COL$ /.@item.Valor</span>
                                    <div class="text-center">
                                        Creado como :<h4>
                                            <u>
                                                @if (item.EmpleadorId != null)
                                                {
                                                    @("Empleador")
                                                }
                                                else
                                                {
                                                    @("Empleado")
                                                }
                                            </u>
                                        </h4>
                                    </div>
                                        @if (JACId == item.Empleo.PerfilCargo.JacId)
                                        {
                                        <div class="text-center h4">LOCAL</div>
                                    }
                                    else
                                    {
                                        <div class="text-center h4">EXTERNO</div>
                                        <!--Calcula la distancia entre el perfil 
                                        (latitud longitud)
                                        y el perfil local del empleo
                                        (latitud longitud)
                                        -->
                                        {
@*                                             CalculaDis(
                                                Convert.ToDouble(item.Empleo.PerfilCargo.Jac.IdZonaVeredaNavigation.Latitud),
                                            Convert.ToDouble(item.Empleo.PerfilCargo.Jac.IdZonaVeredaNavigation.Longitud),
                                            localLon,
                                            localLat
                                            );
 *@
@*                                             CalculaDis(
                                            5.049365,
                                            -74.407485,
                                            5.071246,
                                            -74.374396
                                            );

                                            <div>
                                                Distancia Km : @calcula
                                            </div>
 *@                                        }
                                    }
                                </div>
                            </div>
                            <!-- Product actions-->
                            <div class="card-footer p-3 pt-0 border-top-0 bg-transparent">
                                <div class="text-center"><a class="btn btn-outline-dark mt-auto" href="/ofertaempleo/@item.IdPropuestaEmpleo">Ver Empleo</a></div>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            }
        </div>
    </div>
</div>
@code {
    // HECHO : CALCULAR DISTANCIA ENTRE PERFIL DE EMPLEO LOCAL Y EL PERFIL DE EMPLEO EXTERNO E IMPRIMIRLO EN CADA EMPLEO OFRECIDO. INICIA: 9/MAR/2024 12:34AM  FIN : 9/MAR/2024 610PM 
    // HECHO : QUE LA BUSQUEDA DE TODOS PUEDA BUSCAR CON DESCRIPCION TAMBIEN, BUSCA CON PERFIIL SELECCIONADA PERO CON TODOS NO :  FIN : 13/MAR/2024 2:40PM
    // HECHO : HACER QUE LAS OFERTAS SE VEAN EMPLEOS SOLAMENTE LAS PROPUESTAS 24/FEB/2024 12:35AM FIN : 28/FEB/2024 11:15AM
     // HECHO : QUE SE DESACTIVE EN EL "EMPLEOS PUBLICOS" LOS EMPLEOS QUE SE DESACTIVAN EN "EMPLEOS" 24/FEB/2024 12:34 : FIN : 25/FEB/2024 11:03
    private List<PerfilCargoDTO>? listaCategoria = null;
    private List<PropuestaEmpleoDTO>? listaProducto = null;
    private string buscar = "";
    private int categoriaSeleccionada = 0;
    private int userId { get; set; }
    private int JACId { get; set; }
    [Parameter]
    public int Local { get; set; } = 0;
    [Parameter]
    public int Externo { get; set; } = 0;
    private double calcula { get; set; }
    private double localLat { get; set; }
    private double localLon { get; set; }
    public DistanciaDTO distanciaDTO = new DistanciaDTO();

    public async Task CalculaDis(double lat1, double lon1, double lat2, double lon2)
    {
        // distanciaDTO.latitudPunto1 = 5.049365;
        // distanciaDTO.longitudPunto1 = -74.407485;
        // distanciaDTO.latitudPunto2 = 5.071246;
        // distanciaDTO.longitudPunto2 = -74.374396;
        distanciaDTO.latitudPunto1 = lat1;
        distanciaDTO.longitudPunto1 = lon1;
        distanciaDTO.latitudPunto2 = lat2;
        distanciaDTO.longitudPunto2 = lon2;
        calcula = distancialatlonservicio.CalcularDistancia(distanciaDTO).Result;
        StateHasChanged();
    }


    protected override async Task OnInitializedAsync()
    {
        //Local = Externo = 0;
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            userId = Convert.ToInt32(user.Claims.First(c => c.Type == ClaimTypes.NameIdentifier).Value);
            JACId = Convert.ToInt32(user.Claims.First(c => c.Type == ClaimTypes.Locality).Value);
        }
        //await ObtenerLatLonLocal();
        await ObtenerPerfilesCargos();
        await ObtenerCatalogo();
        StateHasChanged();
    }
    private async Task ObtenerPerfilesCargos(string Valor = "")
    {

        var response = await perfilcargoServicio.Lista(userId,Valor);
        if (response.EsCorrecto)
        {
            listaCategoria = (List<PerfilCargoDTO>)response.Resultado!;
        }
        else
        {
            listaCategoria = new List<PerfilCargoDTO>();
        }
    }

    private async Task ObtenerLatLonLocal()
    {

        var response = await jacServicio.Obtener(JACId);

        if (response.EsCorrecto)
        {
            var listaJac = response.Resultado!;
            // localLat = Convert.ToDouble(listaJac.IdZonaVeredaNavigation.Latitud);
            // localLon = Convert.ToDouble(listaJac.IdZonaVeredaNavigation.Longitud);
        }
        else
        {
            listaProducto = new List<PropuestaEmpleoDTO>();
        }
        StateHasChanged();
    }

    private async Task ObtenerCatalogo()
    {

        var response = await propuestaempleoServicio.Catalogo(categoriaSeleccionada, buscar);

        if (response.EsCorrecto)
        {
            listaProducto = (List<PropuestaEmpleoDTO>)response.Resultado!;
            Local = listaProducto.Where(e => e.Empleo.PerfilCargo.JacId == JACId).Count();
            Externo = listaProducto.Count() - Local;
        }
        else
        {
            listaProducto = new List<PropuestaEmpleoDTO>();
        }
        StateHasChanged();
    }

    private async Task RadioSeleccion(ChangeEventArgs args)
    {

        categoriaSeleccionada = Convert.ToInt32(args.Value);
        //buscar = "";
        await ObtenerCatalogo();
    }


}
