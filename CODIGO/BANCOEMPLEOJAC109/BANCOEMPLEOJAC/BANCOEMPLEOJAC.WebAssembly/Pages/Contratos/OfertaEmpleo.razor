@page "/ofertaempleo/{Id:int}"

@using BANCOEMPLEOJAC.DTO
@using BANCOEMPLEOJAC.Repositorio.Interfase
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using BANCOEMPLEOJAC.Utilidades;
@using System.Globalization

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IPropuestaEmpleoServicio propuestaEmpleoServicio
@inject IPerfilCargoServicio perfilcargoServicio
@inject IUsuarioServicio usuarioServicio
@inject ICarritoServicio carritoServicio
@inject NavigationManager navigate
@inject IToastService toastService
@inject IJacServicio jacServicio


<div class="container px-4 px-lg-5 my-5 position: relative;
    width: 100%;
    height: 100vh;">


    @if (modelo != null)
    {
        <div class="row gx-12 gx-lg-12 align-items-center">
            <div class="col-12">
                @if ((modelo.Aceptada != null) && ((bool)modelo.Aceptada))
                {
                    <div class="badge bg-danger text-white position-absolute" style="top: 1rem; right: 1rem
                                    position: absolute;
                                                            top: 30%;
                                                            left: 70%;
                                                            transform: translate(-5%, -5%);
                                                            text-align: right;
                                                            padding: 20px; font-size: 2em;">
                        Empleo Contratado
                    </div>
                }
                else
                {
                    @if ((modelo.EmpleadoId != null && modelo.EmpleadorId != null) && (modelo.Aceptada == null))
                    {
                        <div class="badge bg-info text-black-50 position-absolute" style="top: 0.5rem; right: 0.5rem
                                                         position: absolute;
                                                            top: 30%;
                                                            left: 70%;
                                                            transform: translate(-5%, -5%);
                                                            text-align: right;
                                                            padding: 20px; font-size: 2em;">
                            En Verificación
                        </div>
                    }
                    @if (((modelo.EmpleadoId != null && modelo.EmpleadorId == null) ||
                   (modelo.EmpleadoId == null && modelo.EmpleadorId != null))
                   && (modelo.Aceptada == null))
                    {
                        <div class="badge bg-success text-light position-absolute" style="top: 0.5rem; right: 0.5rem
                                                            position: absolute;
                                                            top: 30%;
                                                            left: 70%;
                                                            transform: translate(-5%, -5%);
                                                            text-align: right;
                                                            padding: 20px; font-size: 2em;">
                            VACANTE !
                        </div>

                    }
                }

                    <div class="container px-4 px-lg-5 my-5">
                        @if (modelo != null)
                        {

                            <div class="row gx-4 gx-lg-5 align-items-center">
                                    <div >
                                            <div class="row">
                                                <div class="col-12 col-sm-12 col-md-12 col-lg-12">
                                                    @if (modelo.EmpleadorId != null)
                                                    {
                                                        @("EMPLEADOR NECESITA:")
                                                    }
                                                    else
                                                    {
                                                        @("EMPLEADO OFRECE:")
                                                    }
                                                </div>
                                            </div>
                                            <div class="row">
                                                <div class="col-12 display-5 fw-bolder">
                                                    @modelo.Nombre
                                                </div>
                                            </div>
                                            <div class="row">
                                                <div class="col-12 lead">@modelo.Descripcion</div>
                                            </div>
                                            <hr />
                                            <div class="row">
                                                <div class="col col-6 text-end">Requisitos:</div>
                                                <div class="col col-6">@modelo.Requisitos</div>
                                            </div>
                                            <div class="row">
                                                <div class="col col-6 text-end">COL:</div>
                                                <div class="col col-6">$@($"{modelo.Valor:C0}")</div>
                                            </div>
                                            <div class="row">
                                                <div class ="col col-6 text-end">Tipo Contrato: </div>
                                                <div class="col col-6">@nombrecontrato</div>
                                            </div>
                                            <div class="row">
                                                <div class="col col-6 text-end">Ubicación:</div>
                                                <div class="col col-6">@modelo.Ubicacion</div>
                                            </div>
                                                    @if (modelo.EmpleadorId != null || modelo.EmpleadoId != null)
                                                    {
                                                    <div class="row">
                                                        <div class="col col-6 text-end">Distancia :</div>
                                                        <div class="col col-6">
                                                            @calcula.ToString("F2") @(" Km"); 
                                                        </div>
                                                    </div>
                                                    }
                                            <div class="row">
                                                <div class="col col-6 text-end">Fecha Hora Inicia:</div>
                                                <div class="col-6">@modelo.FechaHoraInicio</div>
                                            </div>
                                            <div class="row">
                                                <div class="col col-6 text-end">Fecha Hora Finaliza:</div>
                                                <div class="col-6">@modelo.FechaHoraFin</div>
                                            </div>
                                            <div class="row">
                                                <div class="col col-6 text-end">Cantidad Empleo(s) Ofrecido(s):</div>
                                                <div class="col-6">@modelo.Cantidad</div>
                                            </div>
                                            <div class="row">
                                                <div class="col col-6 text-end">Cantidad Propuestas:</div>
                                                <div class="col col-6">@cantidadPropuestas</div>
                                            </div>
                                            <hr />
                                            <div class="row">
                                            <div class="col col-6 text-end"><b>Empleador :</b></div>
                                                <div class="col col-6"><b>@NombreEmpleador</b></div>
                                            </div>
                                            <div class="row">
                                                <div class="col col-6 text-end"><b>Empleado :</b></div>
                                                <div class="col col-6"><b>@NombreEmpleado</b></div>
                                            </div>
                                            <hr />
                                            @if (modelo.FechaHoraReProponeEmpleador != null)
                                            {
                                                <div class="row">
                                                    <div class="col-6 lead text-end">Fecha Hora Re Propuesta: </div>
                                                    <div class="col col-6">@modelo.FechaHoraReProponeEmpleador</div>
                                                </div>
                                            }
                                            @if (modelo.FechaHoraRevisaEmpleador != null)
                                            {
                                                <div class="row">
                                                    <div class="col-6 lead text-end">Fecha Hora Revisa Empleador:</div>
                                                    <div class="col col-6">@modelo.FechaHoraRevisaEmpleador</div>
                                                </div>
                                            }
                                            @if (modelo.FechaHoraAceptaEmpleador != null)
                                            {
                                                <div class="row">
                                                    <div class="col-6 lead text-end">Fecha Hora Acepta Empleador:</div>
                                                    <div class="col col-6 align-content-center">@modelo.FechaHoraAceptaEmpleador</div>
                                                </div>
                                            }
                                            @if (modelo.Orden != null)
                                            {
                                                <div class="row">
                                                    <div class="col-6 lead text-end">Orden Propuesta:</div>
                                                    <div class="col col-6">@modelo.Orden</div>
                                                </div>
                                           }
                                            <div class="row">
                                                <div class="col-6 lead text-end">Observaciones:</div>
                                                <div class="col col-6">@modelo.Observaciones</div>
                                           </div>
                                            <!-- Rest of your table rows -->
                                    </div>
                                    <!-- Rest of your code -->
                            </div>
                        }
                        else
                        {
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        }
                    </div>

                    <hr />
                    <div class="row">
                        <div class="col-6 text-end">
                            <label class="text-end">Cantidad de Empleo(s) a Contratar : </label>
                        </div>
                        <div class="col-6">
                            <input class=" form-control text-start me-3" disabled type="number" min="1" style="width:60px" @bind-value="cantidad">
                        </div>
                    </div>
                <hr />
                    <div class="row">
                        <div class="col-12 text-center">
                        @if ((userId != modelo.EmpleadorId  && userId != modelo.EmpleadoId) && modelo.Aceptada != true)
                         {
                                <a class="btn btn-outline-dark flex-shrink-0" href="/propuestaempleo/@modelo.IdPropuestaEmpleo.ToString()">
                                    <i class="bi-cart-fill me-1"></i>
                                    Proponer Empleo
                                </a>
                        }
                        @if ((userId == modelo.EmpleadorId && modelo.EmpleadoId != null) && modelo.Aceptada != true)
                        {
                            <button class="btn btn-outline-dark flex-shrink-0 me-3" type="button" @onclick="(async() => await AgregarCarrito(modelo))">
                                <i class="bi-cart-fill me-1"></i>
                                Contratar
                            </button>

                        }
                        <!-- Si tiene mas de 1 propuesta pone boton siguiente para verla siguente propuesta -->
                            @if (IdAnterior != null && IdAnterior != Id)
                            {
                                <button class="btn btn-outline-dark flex-shrink-0 me-3" type="button" @onclick="(async() => await Atras((int)IdAnterior))">
                                    <span class="oi oi-media-skip-backward"></span>
                                    Anterior
                                </button>
                            }
                            @if (IdSiguiente != null && IdSiguiente != Id)
                            {
                                <button class="btn btn-outline-dark flex-shrink-0 me-3" type="button" @onclick="(async() => await Adelante((int)IdSiguiente))">
                                    <span class="oi oi-media-skip-forward"></span>
                                    Siguiente
                                </button>
                            }


                            <!-- Si es el creador de la Propuesta Empleo puede Borrarla, de lo contrario no aparece el boton-->
                            @if (userId == modelo.EmpleadorId || userId == modelo.EmpleadoId)
                            {
                                <button class="btn btn-outline-dark flex-shrink-0 me-3" type="button" @onclick="(async() => await EliminarPropuesta(modelo))">
                                    <i class="oi oi-trash me-1"></i>
                                    Eliminar
                                </button>
                            }
                            <a class="btn btn-outline-dark flex-shrink-0" href="/ofertasempleos">
                                <i class="bi-cart-fill me-1"></i>
                                Volver
                            </a>
                        </div>
                    </div>
            </div>
        </div>
    }
    else
    {
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    }



</div>
@code {
    #region Comentarios Desarrollo
    // HECHO : VER MAS DETALLES EN OFERTAEMPLEO LOS QUE SON DE INTERES PARA CONTRATAR. FECHA: 26/FEB/2024 9:44PM :FIN : 11/MAR/2024 12:22AM
    // HECHO : QUE NO SALGA EL BOTON DE PROPONER SI EL AUTOR DEL EMPLEO ES QUIEN LO VE Y SE MUESTRE EL DE BORRAR, SOLO PARA OTROS : 26/FEB/2024 8:39PM : FIN : 15/MAR/2024 11:34PM
    // HECHO : QUE SE PUEDAN CREAR REPROPUESTAS DE EMPLEO 24/FEB/2024 12:27AM : INICIO : 24/FEB/2024 12:55PM FIN : 26/FEB/2024 8:40PM
    // HECHO : QUE NO APAREZCA ERROR DE DISPLAY AL VER LA REPROUESTA DE EMPLEO. 26/FEB/2024 8:41PM : FIN 8/MAR/2024 10:40AM
    // HECHO : QUE SE VEA INFORMACIÓN DEL EMPLEADOR Y DEL EMPLEADO SI LA HAY  24/FEB/2024 12:24AM : FIN 15/MAR/2024 5:56PM
    // HECHO :  QUE SE PUEDA VER CORRECTAMENTE LAS REPROPUESTAS DE UN EMPLEO SIGUIENTE Y ATRAS 11/MAR/2024 12:36AM FIN : 15/MAR/2024 9:18PM
    // HECHO : QUE SE PUEDA ELIMIAR LA PROPUESTA EMPLEO SOLO POR EL AUTOR. 15/MAR/2024 6:18PM FIN: 15/MAR/2024 11:37PM
    // Z-BD : AGREGAR CAMPO EN PROPUESTA EMPLEO "TIPO CONTRATO" PARA PODER OFERTAR OTRO TIPO DE CONTRATO FECHA. 15/MAR/2024 10:57PM
    // POR HACER : QUE NO PUEDA PROPONER CAMBIOS NI CONTRATAR CUANDO EXISTA YA UNA CONTRATACION DE EMPLEO Y QUE NO APAREZCA EN EMPLEOS PÚBLICOS AL CONTRATAR. FECHA: 15/MAR/2024 11:45PM
    // POR HACER : QUE NO SE PUEDA ELIMINAR LA PROPUESTA CUANDO YA FUE CONTRATADA. FECHA: 15/MAR/2024 11:47PM 
    // POR HACER : QUE NO SE PUEDAN VER LAS PROPUESTAS YA CONTRATADAS Y LAS DEL USUARIO QUE CONTRATA TAMPOCO SOLO DE NUEVOS USUARIOS SI LA CANTIDAD DE EMPLEOS DA PARA TENER MÁS PROPUESTASEMPLEO. FECHA: 16/MAR/2024 11:43AM
    #endregion 

    #region Inicialización de Objetos
    [Parameter]
    public int Id { get; set; }
    private string NombreEmpleador;
    private string NombreEmpleado;
    private UsuarioDTO usuario = new UsuarioDTO();
    public int? IdSiguiente { get; set; } = null;
    public int? IdAnterior { get; set; } = null;
    private PropuestaEmpleoDTO? modelo = null;
    public List<TipoContratoDTO> listaTipoContrato = new List<TipoContratoDTO>();
    private int cantidad = 1;
    private int cantidadPropuestas = 0;
    private int userId;
    private int JACId { get; set; }
    private double calcula { get; set; }
    private double localLat { get; set; }
    private double localLon { get; set; }
    private string nombrecontrato { get; set; }
    public DistanciaDTO distanciaDTO = new DistanciaDTO();
    #endregion

    protected override async Task OnInitializedAsync()
    {
        // IDENTIFICAR EL SUSUARIO
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            userId = Convert.ToInt32(user.Claims.First(c => c.Type == ClaimTypes.NameIdentifier).Value);
            JACId = Convert.ToInt32(user.Claims.First(c => c.Type == ClaimTypes.Locality).Value);
        }

        // Obtener oferta empleo
        var response = await propuestaEmpleoServicio.Obtener(Id);
        if (response.EsCorrecto)
            modelo = (PropuestaEmpleoDTO)response.Resultado!;
        // saca los nombres de EmpleadorId
        ObtieneNombresEmpleador(modelo.EmpleadorId);
        // saca los nombres de EmpleadoId
        ObtieneNombresEmpleado(modelo.EmpleadoId);

        // obtiene el IdSiguiente Propuesta consultando la propuesta que tenga ésta de anterior, si la hay
        if (modelo.EmpleoId != null && modelo.Orden != null)
        {
            var responseS = await propuestaEmpleoServicio.ObtenerSiguiente(modelo.Orden.Value, modelo.EmpleoId.Value);
            if (responseS.EsCorrecto)
            {
                if (responseS.Resultado != null )
                {

                    IdSiguiente = (int)responseS.Resultado;
                    StateHasChanged();
                }
                else
                {
                    IdSiguiente = null;
                    StateHasChanged();
                }
            }
        }
        // obtiene el IdAnterior Propuesta consultando la propuesta que tenga ésta de anterior, si la hay
        if (modelo.EmpleoId != null && modelo.Orden != null)
        {
            var responseS = await propuestaEmpleoServicio.ObtenerAnterior(modelo.Orden.Value, modelo.EmpleoId.Value);
            if (responseS.EsCorrecto)
            {
                if (responseS.Resultado != null)
                {

                    IdAnterior = (int)responseS.Resultado;
                    StateHasChanged();
                }
                else
                {
                    IdAnterior = null;
                    StateHasChanged();
                }
            }
        }

        var propuestas = await propuestaEmpleoServicio.EstadoPorEmpleo(modelo.EmpleoId.GetValueOrDefault());
        cantidadPropuestas = propuestas.Resultado.Propuestas;

        var TipoContrato = await perfilcargoServicio.ListaTipoContrato("NA");
        if (TipoContrato.EsCorrecto)
        {
            listaTipoContrato = TipoContrato.Resultado;
        }
        var response0 = await propuestaEmpleoServicio.Obtener(Id);
        if (response0.EsCorrecto)
            modelo = (PropuestaEmpleoDTO)response0.Resultado!;
        if (modelo.Empleo.PerfilCargo.IdTipoContrato != null)
            nombrecontrato = listaTipoContrato.Where(c => c.IdTipoContrato == modelo.Empleo.PerfilCargo.IdTipoContrato).FirstOrDefault().Nombre.ToString();

        #region Localización Por Latitud Longitud
        // localizacion empleo
        var response1 = await jacServicio.Obtener(modelo.Empleo.PerfilCargo.Jac.IdJac);
        if (response1.EsCorrecto)
        {
            var jac = response1.Resultado!;
            var zona = await jacServicio.ObtenerZonaVereda(jac.IdZonaVereda);
            distanciaDTO.latitudPunto1 = double.Parse(zona.Resultado.Latitud, CultureInfo.InvariantCulture);
            distanciaDTO.longitudPunto1 = double.Parse(zona.Resultado.Longitud, CultureInfo.InvariantCulture);
        }

        // localizacion JAC Usuario
        var response2 = await jacServicio.Obtener(JACId);
        if (response2.EsCorrecto)
        {
            var jac = response2.Resultado!;
            var zona = await jacServicio.ObtenerZonaVereda(jac.IdZonaVereda);
            distanciaDTO.latitudPunto2 = double.Parse(zona.Resultado.Latitud, CultureInfo.InvariantCulture);
            distanciaDTO.longitudPunto2 = double.Parse(zona.Resultado.Longitud, CultureInfo.InvariantCulture);
        }
        calcula = CalculaDis(Convert.ToDouble(distanciaDTO.latitudPunto1), Convert.ToDouble(distanciaDTO.longitudPunto1), Convert.ToDouble(distanciaDTO.latitudPunto2), Convert.ToDouble(distanciaDTO.longitudPunto2)).Result;
        #endregion
    }

    private async Task ObtieneNombresEmpleador(int? IdUsuario)
    {
        if (modelo.EmpleadorId != null)
        {
            var respuesta = await usuarioServicio.Obtener(IdUsuario.Value);
            if (respuesta.EsCorrecto)
            {
                NombreEmpleador = respuesta.Resultado.Nombres.ToString() + " " + respuesta.Resultado.Apellidos.ToString();
            }
        }
        else
            NombreEmpleador = "No hay Empleador Todavía";

    }
   
    private async Task ObtieneNombresEmpleado(int? IdUsuario)
    {
        if (modelo.EmpleadoId != null)
        {
            var respuesta = await usuarioServicio.Obtener(IdUsuario.Value);
            if (respuesta.EsCorrecto)
            {
                NombreEmpleado = respuesta.Resultado.Nombres.ToString() + " " + respuesta.Resultado.Apellidos.ToString();
            }
        }
        else
            NombreEmpleado = "No hay Empleado Todavía";
    }

    public async Task<double> CalculaDis(double lat1, double lon1, double lat2, double lon2)
    {
        distanciaDTO.latitudPunto1 = lat1;
        distanciaDTO.longitudPunto1 = lon1;
        distanciaDTO.latitudPunto2 = lat2;
        distanciaDTO.longitudPunto2 = lon2;
        calcula = DistanciaLatLon.CalculateDistance(lat1, lon1, lat2, lon2);
        return calcula;
    }

    private async Task Adelante(int IdSiguiente)
    {
        navigate.NavigateTo("/ofertaempleo/"+ IdSiguiente);
        IdAnterior = Id;

        var response = await propuestaEmpleoServicio.Obtener((int)IdSiguiente);
        if (response.EsCorrecto)
            modelo = (PropuestaEmpleoDTO)response.Resultado!;
        // saca los nombres de EmpleadorId
        ObtieneNombresEmpleador(modelo.EmpleadorId);
        // saca los nombres de EmpleadoId
        ObtieneNombresEmpleado(modelo.EmpleadoId);
        // obtiene el IdSiguiente Propuesta si la hay
        if (modelo.Orden != null && modelo.EmpleoId != null)
        {
            var responseS = await propuestaEmpleoServicio.ObtenerSiguiente((int)modelo.Orden,(int)modelo.EmpleoId);
            if (responseS.EsCorrecto)
            {
                if (responseS.Resultado != null)
                {
                    this.IdSiguiente = (int)responseS.Resultado;
                    IdAnterior = modelo.PropuestaEmpleoAnteriorId;
                    StateHasChanged();
                }
                else
                {
                    this.IdSiguiente = null;
                    StateHasChanged();
                }
            }
        }
        StateHasChanged();
    }
    
    private async Task Atras(int IdAnterior)
    {
        navigate.NavigateTo("/ofertaempleo/" + IdAnterior);
        this.IdSiguiente = Id;

        var response = await propuestaEmpleoServicio.Obtener(IdAnterior);
        if (response.EsCorrecto)
            modelo = (PropuestaEmpleoDTO)response.Resultado!;
        // saca los nombres de EmpleadorId
        ObtieneNombresEmpleador(modelo.EmpleadorId);
        // saca los nombres de EmpleadoId
        ObtieneNombresEmpleado(modelo.EmpleadoId);


        // obtiene el IdAnterior Propuesta si la hay
        if (modelo.Orden != null && modelo.EmpleoId != null)
        {
            var responseS = await propuestaEmpleoServicio.ObtenerAnterior((int)modelo.Orden, (int)modelo.EmpleoId);
            if (responseS.EsCorrecto)
            {
                if (responseS.Resultado != null)
                {
                    this.IdAnterior = (int)responseS.Resultado;
                    StateHasChanged();
                }
                else
                {
                    this.IdAnterior = null;
                    StateHasChanged();
                }
            }
        }
        StateHasChanged();
    }
    
    private async Task AgregarCarrito(PropuestaEmpleoDTO modelo)
    {
        decimal? precioFinal = (modelo.Valor);

        CarritoDTO carrito = new CarritoDTO()
            {
                propuestaEmpleo = modelo,
                // Producto = modelo,
                Cantidad = cantidad,
                Precio = precioFinal,
                Total = Convert.ToDecimal(cantidad) * precioFinal
            };

        await carritoServicio.AgregarCarrito(carrito);

    }

    private async Task AgregarPropuesta(PropuestaEmpleoDTO modelo)
    {
        decimal? precioFinal = (modelo.Valor);

        CarritoDTO carrito = new CarritoDTO()
            {
                // Producto = modelo,
                Cantidad = cantidad,
                Precio = precioFinal,
                Total = Convert.ToDecimal(cantidad) * precioFinal
            };

        await carritoServicio.AgregarCarrito(carrito);
    }

    private async Task EliminarPropuesta(PropuestaEmpleoDTO modelo)
    {
        var response = await propuestaEmpleoServicio.Eliminar(Id);
        if (response.EsCorrecto)
        {
            toastService.ShowSuccess("Se eliminó la Propuesta Empleo");
            navigate.NavigateTo("/Empleos");
        }
        else
            toastService.ShowWarning("No se pudo eliminar:" + response.Mensaje);
    }
}
