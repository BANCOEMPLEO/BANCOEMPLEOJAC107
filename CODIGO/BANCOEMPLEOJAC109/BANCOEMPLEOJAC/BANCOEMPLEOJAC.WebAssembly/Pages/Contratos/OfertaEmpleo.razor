@page "/ofertaempleo/{Id:int}"

@using BANCOEMPLEOJAC.DTO
@using BANCOEMPLEOJAC.Repositorio.Interfase
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using BANCOEMPLEOJAC.Utilidades;
@using System.Globalization

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IPropuestaEmpleoServicio propuestaEmpleoServicio
@inject IPerfilCargoServicio perfilcargoServicio
@inject ICarritoServicio carritoServicio
@inject NavigationManager navigate
@inject IToastService toastService
@inject IJacServicio jacServicio


<div class="container px-4 px-lg-5 my-5">


    @if (modelo != null)
    {
        <div class="row gx-4 gx-lg-5 align-items-center">
            <div class="col-md-6">
                <p class="lead">
                    @if (modelo.EmpleadorId != null)
                    {
                        @("EMPLEADOR NECESITA:")
                    }
                    else
                    {
                        @("EMPLEADO OFRECE:")
                    }
                </p>
                <h1 class="display-5 fw-bolder">@modelo.Nombre</h1>
                <div class="fs-5 mb-5">

                    <span>$COL /.@modelo.Valor</span>
                </div>
                <p class="lead">@modelo.Descripcion</p>
                <p class="lead">Tipo Contrato : @nombrecontrato</p>
                <p class="lead">Requisitos : @modelo.Requisitos</p>
                <p class="lead">Ubicación : @modelo.Ubicacion</p>
                @if (modelo.EmpleadorId != null || modelo.EmpleadoId != null)
                {
                    <p class="lead">
                        Distancia : @calcula.ToString("F2") KM
                    </p>
                }
                <p class="lead">Fecha Hora Inicia : @modelo.FechaHoraInicio</p>
                <p class="lead">Fecha Hora Finaliza : @modelo.FechaHoraFin</p>
                <p class="lead">Cantidad Empleo(s) Ofrecido(s) : @modelo.Cantidad</p>
                <p class="lead">Empleador Id : @modelo.EmpleadorId</p>
                <p class="lead">Empleado Id : @modelo.EmpleadoId</p>
                <p class="lead">Cantidad Propuestas : @cantidadPropuestas</p>
                @if (modelo.FechaHoraReProponeEmpleador != null)
                {
                    <p class="lead">Fecha Hora Re Propuesta : @modelo.FechaHoraReProponeEmpleador</p>
                }
                @if (modelo.FechaHoraRevisaEmpleador != null)
                {
                    <p class="lead">Fecha Hora Revisa Empleador : @modelo.FechaHoraRevisaEmpleador</p>
                }
                @if (modelo.FechaHoraAceptaEmpleador != null)
                {
                    <p class="lead">Fecha Hora Acepta Empleador : @modelo.FechaHoraAceptaEmpleador</p>
                }
                @if (modelo.Orden != null)
                {
                    <p class="lead">Orden Propuesta : @modelo.Orden</p>
                }
                <p class="lead">Observaciones : @modelo.Observaciones</p>
                <div class="d-flex">
                    <input class="form-control text-center me-3" type="number" min="1" style="width:60px" @bind-value="cantidad">

                    <a class="btn btn-outline-dark flex-shrink-0" href="/propuestaempleo/@modelo.IdPropuestaEmpleo.ToString()">
                        <i class="bi-cart-fill me-1"></i>
                        Proponer Cambios
                    </a>
                    <button class="btn btn-outline-dark flex-shrink-0 me-3" type="button" @onclick="(async() => await AgregarCarrito(modelo))">
                        <i class="bi-cart-fill me-1"></i>
                        Contratar
                    </button>
                    <!-- Si tiene mas de 1 propuesta pone boton siguiente para verla siguente propuesta -->
                    @if (IdAnterior != null && IdAnterior != Id)
                    {
                        <button class="btn btn-outline-dark flex-shrink-0 me-3" type="button" @onclick="(async() => await Atras((int)IdAnterior))">
                            <span class="oi oi-media-skip-backward"></span>
                            Anterior
                        </button>
                    }
                    @if (IdSiguiente != null && IdSiguiente != Id)
                    {
                        <button class="btn btn-outline-dark flex-shrink-0 me-3" type="button" @onclick="(async() => await Adelante((int)IdSiguiente))">
                            <span class="oi oi-media-skip-forward"></span>
                            Siguiente
                        </button>
                    }


                    <!-- Si es el creador de la Propuesta Empleo puede Borrarla, de lo contrario no aparece el boton-->
                    @if (userId == modelo.EmpleadorId || userId == modelo.EmpleadoId)
                    {
                        <button class="btn btn-outline-dark flex-shrink-0 me-3" type="button" @onclick="(async() => await EliminarPropuesta(modelo))">
                            <i class="oi oi-trash me-1"></i>
                            Eliminar
                        </button>
                    }
                    <a class="btn btn-outline-dark flex-shrink-0" href="/ofertasempleos">
                        <i class="bi-cart-fill me-1"></i>
                        Volver
                    </a>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    }



</div>
@code {
    // HECHO : VER MAS DETALLES EN OFERTAEMPLEO LOS QUE SON DE INTERES PARA CONTRATAR. FECHA: 26/FEB/2024 9:44PM :FIN : 11/MAR/2024 12:22AM
    // VOY : QUE NO SALGA EL BOTON DE PROPONER SI EL AUTOR DEL EMPLEO ES QUIEN LO VE Y SE MUESTRE EL DE BORRAR, SOLO PARA OTROS : 26/FEB/2024 8:39PM :
    // HECHO : QUE SE PUEDAN CREAR REPROPUESTAS DE EMPLEO 24/FEB/2024 12:27AM : INICIO : 24/FEB/2024 12:55PM FIN : 26/FEB/2024 8:40PM
    // HECHO : QUE NO APAREZCA ERROR DE DISPLAY AL VER LA REPROUESTA DE EMPLEO. 26/FEB/2024 8:41PM : FIN 8/MAR/2024 10:40AM
    // POR HACER : QUE SE VEA INFORMACIÓN DEL EMPLEADOR Y DEL EMPLEADO SI LA HAY POR COMPONENTE Y PARAMETROS 24/FEB/2024 12:24AM
    [Parameter]
    public int Id { get; set; }
    public int? IdSiguiente { get; set; } = null;
    public int? IdAnterior { get; set; } = null;
    private PropuestaEmpleoDTO? modelo = null;
    public List<TipoContratoDTO> listaTipoContrato = new List<TipoContratoDTO>();
    private int cantidad = 1;
    private int cantidadPropuestas = 0;
    private int userId;
    private int JACId { get; set; }
    private double calcula { get; set; }
    private double localLat { get; set; }
    private double localLon { get; set; }
    private string nombrecontrato { get; set; }
    public DistanciaDTO distanciaDTO = new DistanciaDTO();


    protected override async Task OnInitializedAsync()
    {
        var response = await propuestaEmpleoServicio.Obtener(Id);
        if (response.EsCorrecto)
            modelo = (PropuestaEmpleoDTO)response.Resultado!;

        // obtiene el IdSiguiente Propuesta si la hay
        if (Id != null)
        {
            var responseS = await propuestaEmpleoServicio.ObtenerAnterior(Id);
            if (responseS.EsCorrecto)
            {
                if (responseS.Resultado != null )
                {

                    IdSiguiente = (int)responseS.Resultado;
                    IdAnterior = Id;
                    StateHasChanged();
                }
                else
                {
                    IdSiguiente = null;
                    StateHasChanged();
                }
            }
        }
        var propuestas = await propuestaEmpleoServicio.ListaPorEmpleo(modelo.EmpleoId.GetValueOrDefault());
        cantidadPropuestas = propuestas.Resultado.Count();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            userId = Convert.ToInt32(user.Claims.First(c => c.Type == ClaimTypes.NameIdentifier).Value);
            JACId = Convert.ToInt32(user.Claims.First(c => c.Type == ClaimTypes.Locality).Value);
        }

        var TipoContrato = await perfilcargoServicio.ListaTipoContrato("NA");
        if (TipoContrato.EsCorrecto)
        {
            listaTipoContrato = TipoContrato.Resultado;
        }


        var response0 = await propuestaEmpleoServicio.Obtener(Id);
        if (response0.EsCorrecto)
            modelo = (PropuestaEmpleoDTO)response0.Resultado!;
        if (modelo.Empleo.PerfilCargo.IdTipoContrato != null)
            nombrecontrato = listaTipoContrato.Where(c => c.IdTipoContrato == modelo.Empleo.PerfilCargo.IdTipoContrato).FirstOrDefault().Nombre.ToString();

        // localizacion empleo
        var response1 = await jacServicio.Obtener(modelo.Empleo.PerfilCargo.Jac.IdJac);
        if (response1.EsCorrecto)
        {
            var jac = response1.Resultado!;
            var zona = await jacServicio.ObtenerZonaVereda(jac.IdZonaVereda);
            distanciaDTO.latitudPunto1 = double.Parse(zona.Resultado.Latitud, CultureInfo.InvariantCulture);
            distanciaDTO.longitudPunto1 = double.Parse(zona.Resultado.Longitud, CultureInfo.InvariantCulture);
        }

        // localizacion local
        var response2 = await jacServicio.Obtener(JACId);
        if (response2.EsCorrecto)
        {
            var jac = response2.Resultado!;
            var zona = await jacServicio.ObtenerZonaVereda(jac.IdZonaVereda);
            distanciaDTO.latitudPunto2 = double.Parse(zona.Resultado.Latitud, CultureInfo.InvariantCulture);
            distanciaDTO.longitudPunto2 = double.Parse(zona.Resultado.Longitud, CultureInfo.InvariantCulture);
        }
        calcula = CalculaDis(Convert.ToDouble(distanciaDTO.latitudPunto1), Convert.ToDouble(distanciaDTO.longitudPunto1), Convert.ToDouble(distanciaDTO.latitudPunto2), Convert.ToDouble(distanciaDTO.longitudPunto2)).Result;
    }

    public async Task<double> CalculaDis(double lat1, double lon1, double lat2, double lon2)
    {
        distanciaDTO.latitudPunto1 = lat1;
        distanciaDTO.longitudPunto1 = lon1;
        distanciaDTO.latitudPunto2 = lat2;
        distanciaDTO.longitudPunto2 = lon2;
        calcula = DistanciaLatLon.CalculateDistance(lat1, lon1, lat2, lon2);
        return calcula;
    }

    private async Task Adelante(int IdSiguiente)
    {
        navigate.NavigateTo("/ofertaempleo/"+ IdSiguiente);
        IdAnterior = Id;

        var response = await propuestaEmpleoServicio.Obtener((int)IdSiguiente);
        if (response.EsCorrecto)
            modelo = (PropuestaEmpleoDTO)response.Resultado!;

        // obtiene el IdSiguiente Propuesta si la hay
        if (modelo.IdPropuestaEmpleo != null)
        {
            var responseS = await propuestaEmpleoServicio.ObtenerAnterior((int)modelo.IdPropuestaEmpleo);
            if (responseS.EsCorrecto)
            {
                if (responseS.Resultado != null)
                {

                    this.IdSiguiente = (int)responseS.Resultado;
                    IdAnterior = modelo.PropuestaEmpleoAnteriorId;
                    StateHasChanged();
                }
                else
                {
                    this.IdSiguiente = null;
                    StateHasChanged();
                }
            }
        }


        StateHasChanged();
        //OnInitializedAsync();
    }
    private async Task Atras(int IdAnterior)
    {
        navigate.NavigateTo("/ofertaempleo/" + IdAnterior);
        this.IdAnterior = Id;

        var response = await propuestaEmpleoServicio.Obtener(IdAnterior);
        if (response.EsCorrecto)
            modelo = (PropuestaEmpleoDTO)response.Resultado!;

        // obtiene el IdAnterior Propuesta si la hay
        if (modelo.PropuestaEmpleoAnteriorId != null)
        {
            var responseS = await propuestaEmpleoServicio.Obtener((int)modelo.PropuestaEmpleoAnteriorId);
            if (responseS.EsCorrecto)
            {
                if (responseS.Resultado != null)
                {
                    modelo = responseS.Resultado;
                    this.IdSiguiente = modelo.PropuestaEmpleoAnteriorId;// (int)responseS.Resultado;
                    this.IdAnterior = Id;
                    StateHasChanged();
                }
                else
                {
                    this.IdSiguiente = Id;
                    StateHasChanged();
                }
            }
        }


        StateHasChanged();
        //OnInitializedAsync();
    }
    private async Task AgregarCarrito(PropuestaEmpleoDTO modelo)
    {
        decimal? precioFinal = (modelo.Valor);

        CarritoDTO carrito = new CarritoDTO()
            {
                propuestaEmpleo = modelo,
                // Producto = modelo,
                Cantidad = cantidad,
                Precio = precioFinal,
                Total = Convert.ToDecimal(cantidad) * precioFinal
            };

        await carritoServicio.AgregarCarrito(carrito);

    }

    private async Task AgregarPropuesta(PropuestaEmpleoDTO modelo)
    {
        decimal? precioFinal = (modelo.Valor);

        CarritoDTO carrito = new CarritoDTO()
            {
                // Producto = modelo,
                Cantidad = cantidad,
                Precio = precioFinal,
                Total = Convert.ToDecimal(cantidad) * precioFinal
            };

        await carritoServicio.AgregarCarrito(carrito);
    }

    private async Task EliminarPropuesta(PropuestaEmpleoDTO modelo)
    {
        var response = await propuestaEmpleoServicio.Eliminar(Id);
        if (response.EsCorrecto)
        {
            toastService.ShowSuccess("Se eliminó la Propuesta Empleo");
            navigate.NavigateTo("/Empleos");
        }
        else
            toastService.ShowWarning("No se pudo eliminar:" + response.Mensaje);
    }
}
