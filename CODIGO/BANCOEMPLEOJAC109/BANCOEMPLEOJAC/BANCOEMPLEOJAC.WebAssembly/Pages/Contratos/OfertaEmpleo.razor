@using BANCOEMPLEOJAC.DTO

@page "/ofertaempleo/{Id:int}"
@inject IPropuestaEmpleoServicio propuestaEmpleoServicio
@inject ICarritoServicio carritoServicio

<div class="container px-4 px-lg-5 my-5">


    @if (modelo != null)
    {
        <div class="row gx-4 gx-lg-5 align-items-center">
            <div class="col-md-6">
                <p class="lead">
                    @if (modelo.EmpleadorId != null)
                    {
                        @("EMPLEADOR NECESITA:")
                    }
                    else
                    {
                        @("EMPLEADO OFRECE:")
                    }
                </p>
                <h1 class="display-5 fw-bolder">@modelo.Nombre</h1>
                <div class="fs-5 mb-5">

                    <span>$COL /.@modelo.Valor</span>
                </div>
                <p class="lead">@modelo.Descripcion</p>
                <p class="lead">Requisitos : @modelo.Requisitos</p>
                <p class="lead">Ubicación : @modelo.Ubicacion</p>
                <p class="lead">Fecha Hora Inicia : @modelo.FechaHoraInicio</p>
                <p class="lead">Fecha Hora Finaliza : @modelo.FechaHoraFin</p>
                <div class="d-flex">
                    <input class="form-control text-center me-3" type="number" min="1" style="width:60px" @bind-value="cantidad">

                    <a class="btn btn-outline-dark flex-shrink-0" href="/propuestaempleo/@modelo.IdPropuestaEmpleo.ToString()">
                        <i class="bi-cart-fill me-1"></i>
                        Proponer Cambios
                    </a>
                    <button class="btn btn-outline-dark flex-shrink-0 me-3" type="button" @onclick="(async() => await AgregarCarrito(modelo))">
                        <i class="bi-cart-fill me-1"></i>
                        Contratar 
                    </button>
                    <a class="btn btn-outline-dark flex-shrink-0" href="/ofertasempleos">
                        <i class="bi-cart-fill me-1"></i>
                        Volver
                    </a>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    }



</div>
@code {
    // VOY : VER MAS DETALLES EN OFERTAEMPLEO LOS QUE SON DE INTERES PARA CONTRATAR. FECHA: 26/FEB/2024 9:44PM
    // VOY : QUE NO SALGA EL BOTON DE PROPONER SI EL AUTOR DEL EMPLEO ES QUIEN LO VE Y SE MUESTRE EL DE BORRAR, SOLO PARA OTROS : 26/FEB/2024 8:39PM :
    // HECHO : QUE SE PUEDAN CREAR REPROPUESTAS DE EMPLEO 24/FEB/2024 12:27AM : INICIO : 24/FEB/2024 12:55PM FIN : 26/FEB/2024 8:40PM
    // HECHO : QUE NO APAREZCA ERROR DE DISPLAY AL VER LA REPROUESTA DE EMPLEO. 26/FEB/2024 8:41PM : FIN 8/MAR/2024 10:40AM
    // POR HACER : QUE SE VEA INFORMACIÓN DEL EMPLEADOR Y DEL EMPLEADO SI LA HAY POR COMPONENTE Y PARAMETROS 24/FEB/2024 12:24AM
    [Parameter]
    public int Id { get; set; }
    private PropuestaEmpleoDTO? modelo = null;
    private int cantidad = 1;

    protected override async Task OnParametersSetAsync()
    {
        var response = await propuestaEmpleoServicio.Obtener(Id);
        if (response.EsCorrecto)
            modelo = (PropuestaEmpleoDTO)response.Resultado!;
    }

    private async Task AgregarCarrito(PropuestaEmpleoDTO modelo)
    {
        decimal? precioFinal = (modelo.Valor);

        CarritoDTO carrito = new CarritoDTO()
            {
                // Producto = modelo,
                Cantidad = cantidad,
                Precio = precioFinal,
                Total = Convert.ToDecimal(cantidad) * precioFinal
            };

        await carritoServicio.AgregarCarrito(carrito);

    }
    private async Task AgregarPropuesta(PropuestaEmpleoDTO modelo)
    {
        decimal? precioFinal = (modelo.Valor);

        CarritoDTO carrito = new CarritoDTO()
            {
                // Producto = modelo,
                Cantidad = cantidad,
                Precio = precioFinal,
                Total = Convert.ToDecimal(cantidad) * precioFinal
            };

        await carritoServicio.AgregarCarrito(carrito);

    }
}
