@page "/zonavereda"
@page "/zonavereda/{Id}"
@page "/zonavereda/{Id}/{IdZonaVereda}"
@using BANCOEMPLEOJAC.DTO
@using BANCOEMPLEOJAC.WebAssembly.Servicio.Interfase
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization;

@inject IRolServicio rolServicio
@inject IToastService toastService
@inject NavigationManager _navServicio
@inject IJacServicio _jacServicio
@attribute [Authorize(Roles = "1,2,3,4")]


<div class="row justify-content-center  mt-3">
    <p class="col-sm-12 col-md-8 col-xl-10 h4 mt-2">@Titulo</p>
</div>
<div class="row justify-content-center  mt-3">
    <div class="col-sm-12 col-md-8 col-xl-10">
        <EditForm Model="modelo" OnValidSubmit="GuardarCambios">
            <DataAnnotationsValidator></DataAnnotationsValidator>

            <ValidationMessage For="@(()=>modelo.IdzonaVereda)" />
            <input type="hidden" @bind-value="modelo.IdzonaVereda" />
            <input type="hidden" @bind-value="modelo.IdMunicipio" />
            <div class="input-group mt-3">
                <span class="input-group-text  bg-secondary text-light" id="basic-addon3">Nombre</span>
                <input type="text" class="form-control" @bind-value="modelo.Nombre">
            </div>
            <ValidationMessage For="@(()=>modelo.Nombre)" />
            <div class="input-group mt-3">
                <span class="input-group-text  bg-secondary text-light" id="basic-addon3">Ubicación</span>
                <input type="text" class="form-control" @bind-value="modelo.Ubicacion">
            </div>
            <ValidationMessage For="@(()=>modelo.Ubicacion)" />

            <div class="input-group mt-3">
                <span class="input-group-text  bg-secondary text-light" id="basic-addon3">Latitud</span>
                <input type="text" class="form-control" @bind-value="modelo.Latitud">
            </div>
            <ValidationMessage For="@(()=>modelo.Latitud)" />
            <div class="input-group mt-3">
                <span class="input-group-text  bg-secondary text-light" id="basic-addon3">Longitud</span>
                <input type="text" class="form-control" @bind-value="modelo.Longitud">
            </div>
            <ValidationMessage For="@(()=>modelo.Longitud)" />
            <div class="input-group mt-3">
                <span class="input-group-text  bg-secondary text-light" id="basic-addon3">Observaciones</span>
                <input type="text" class="form-control" @bind-value="modelo.Observaciones"><br />
            </div>
            <ValidationMessage For="@(()=>modelo.Observaciones)" />

            <div class="mt-3 justify-content-center">
                <button type="submit" class="btn btn-primary" style="width:130px">@boton</button>
                <a href="/jac" class="btn btn-secondary float-end" style="width:130px">Volver</a>
            </div>
        </EditForm>
    </div>
</div>
@code {
    [Parameter]
    public string? Id { get; set; } = "";
    [Parameter]
    public string? IdZonaVereda { get; set; } = "";
    // [Parameter]
    // public int IdRol { get; set; } = 5;
    // [Parameter]
    // public List<RolDTO>? listaRol { get; set; } = null;
    // private List<JacDTO> listaJac = new List<JacDTO>();

    private string Titulo = "Nueva Zona Localidad o Vereda";
    private string boton = "Crear";
    private ZonaVeredaDTO modelo = new ZonaVeredaDTO();

    // protected override async Task OnInitializedAsync()
    // {
    //     // try
    //     // {

    //     //     var response = await _jacServicio.Lista("NA");
    //     //     if (response.EsCorrecto)
    //     //     {
    //     //         listaJac = (List<JacDTO>)response.Resultado!;
    //     //         if (listaJac.Any() && Id == 0)
    //     //         {
    //     //             modelo.JacId = listaJac.First().IdJac;
    //     //         }
    //     //     }

    //     // }
    //     // catch (Exception ex)
    //     // {

    //     //     throw ex;
    //     // }
    //     // ObtenerRoles();
    // }
    protected override async Task OnParametersSetAsync()
    {
        if (IdZonaVereda.Count() == 0)
        {
            modelo.IdzonaVereda = Guid.NewGuid().ToString();
            modelo.IdMunicipio = Id;
        }
        else
        {
            Titulo = "Editar Zona Localidad o Vereda";
            boton = "Actualizar";
            var response = await _jacServicio.ObtenerZonaVereda(IdZonaVereda);
            if (response.EsCorrecto)
            {
                modelo = (ZonaVeredaDTO)response.Resultado!;
            }
            else
            {
                toastService.ShowWarning(response.Mensaje);
            }
            
        }
    }

    // private async Task ObtenerRoles(string Valor = "")
    // {
    //     var response = await rolServicio.Lista(Valor);

    //     if (response.EsCorrecto!)
    //     {
    //         listaRol = (List<RolDTO>)response.Resultado!;
    //     }
    //     else
    //     {
    //         listaRol = new List<RolDTO>();
    //     }
    // }

    // void CambiarRoles(ChangedEventArgs e)
    // {
    //     IdRol = Convert.ToInt32(e.NewValue.ToString());
    //     modelo.Rol = IdRol;

    // }


    // async Task OnFileChange(InputFileChangeEventArgs e)
    // {
    //     FileInfo fileInfo = new FileInfo(e.File.Name);
    //     if (fileInfo.Extension.ToLower().Contains(".jpg") || fileInfo.Extension.ToLower().Contains(".png"))
    //     {
    //         var format = $"image/{fileInfo.Extension.Replace(".", "")}";
    //         var resizeImage = await e.File.RequestImageFileAsync(format, 450, 300);
    //         var buffer = new byte[resizeImage.Size];
    //         await resizeImage.OpenReadStream().ReadAsync(buffer);
    //         var imagenData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
    //         modelo.Foto = imagenData;
    //     }

    // }
    private async Task GuardarCambios()
    {
        // if (modelo.Clave != modelo.ConfirmarClave)
        // {
        //     toastService.ShowWarning("Las constraseñas no coinciden");
        //     return;
        // }

        bool respuesta = true;
        string mensaje = string.Empty;
        if (IdZonaVereda.Count() > 0)
        {
            var response = await _jacServicio.EditarZonaVereda(modelo);
            if (response.EsCorrecto)
            {
                mensaje = "Zona Localidad o Vereda fue modificada";
            }
            else
            {
                respuesta = false;
                mensaje = "No ser pudo editar";
            }
        }
        else
        {
            modelo.IdMunicipio = Id;
            //modelo = _map.Map<ZonaVeredaDTO>(modelo);
            var response = await _jacServicio.CrearZonaVereda(modelo);
            if (response.EsCorrecto)
            {
                mensaje = "Zona Localidad o Vereda fue creada";
            }
            else
            {
                respuesta = false;
                mensaje = "No se pudo crear";
            }
         }
        if (respuesta)
        {
            toastService.ShowSuccess(mensaje);
            _navServicio.NavigateTo("/jac");
        }
        else
        {
            toastService.ShowWarning(mensaje);
        }
    }
}
