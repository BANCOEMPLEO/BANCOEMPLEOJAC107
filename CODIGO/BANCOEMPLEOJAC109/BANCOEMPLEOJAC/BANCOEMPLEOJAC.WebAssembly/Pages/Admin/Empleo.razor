@page "/empleo"
@page "/empleo/{Id:int}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IEmpleoServicio empleoServicio
@inject IPerfilCargoServicio perfilcargoServicio
@inject IToastService toastService
@inject NavigationManager _navServicio

@attribute [Authorize(Roles = "1,2,3,4,5")]



<div class="row justify-content-center  mt-3">
    <p class="col-sm-12 col-md-8 col-xl-10 h4 mt-2">@Titulo</p>
</div>
<div class="row justify-content-center  mt-3">
    <div class="col-sm-12 col-md-8 col-xl-10">

        <EditForm Model="modelo" OnValidSubmit="GuardarCambios">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <!--Como empleador o Empleado-->
            <div class="input-group mt-3">
                <label class="input-group-text bg-light" for="inputGroupSelect01">Actúa como :</label>
                <select class="form-control" @onchange="CambiarTipo" id="selTipo">
                    <option value="true" selected="@empleador">Empleador</option>
                    <option value="false" selected="@(!empleador)">Empleado</option>
                </select>
            </div>
            @if (empleador)
            {
                <input type="hidden" @bind-value="modelo.EmpleadorId" />
            }
            else
            {
                <input type="hidden" @bind-value="modelo.EmpleadoId" />
            }

            <div class="input-group mt-3">
                @if (empleador)
                {
                    <span class="input-group-text bg-light" id="basic-addon3">
                        Número Empleos Requeridos:
                        <input type="number" class="form-control" @bind-value="modelo.Cantidad">
                    </span>
                }
                else
                {
                    <span class="input-group-text bg-light" id="basic-addon3">
                        Cantidad Empleados:
                        <input type="number" disabled class="form-control" @bind-value="modelo.Cantidad">
                    </span>
                }
            </div>
            <ValidationMessage For="@(()=>modelo.Cantidad)" />

            <div class="input-group mt-3">
                <a href="/perfilcargo" class="btn btn-secondary float-start oi oi-plus" style="width:45px; heigh:auto"></a>
                <label class="input-group-text bg-light col-sm-1 col-md-2 col-lg-4 display: block; hight: 100px;" for="inputGroupSelect01">Perfil ó Cargo y Tipo Contrato :</label>
                <select class="form-control col-sm-8 col-lg-8 overflow: hidden;" @onchange="CambiarCategoria">
                    @foreach (var item in listaPerfilCargo)
                    {
                        if (item.IdPerfilCargo == IdPerfilCargo)
                        {
                            <option value="@item.IdPerfilCargo" selected>@item.Descripcion - <b>@listaTipoContrato.Where(lp => lp.IdTipoContrato == item.IdTipoContrato).FirstOrDefault().Nombre.ToString()</b></option>
                        }
                        else
                        {
                            <option value="@item.IdPerfilCargo">@item.Descripcion - <b>@listaTipoContrato.Where(lp => lp.IdTipoContrato == item.IdTipoContrato).FirstOrDefault().Nombre.ToString()</b></option>
                        }
                    }
                </select>
                <a href="/perfilcargo/@IdPerfilCargo" class="btn btn-secondary float-end oi oi-pencil" style="width:45px"></a>

            </div>

            <div class="input-group mt-3">
                <span class="input-group-text bg-light" id="basic-addon3">Nombre Empleo</span>
                <input type="text" class="form-control" @bind-value="modelo.Nombre">
            </div>
            <ValidationMessage For="@(()=>modelo.Nombre)" />

            <div class="input-group  mt-3">
                <span class="input-group-text bg-light">Descripcion Empleo</span>
                <input type="text" class="form-control" @bind-value="modelo.Descripcion"></input>

            </div>
            <ValidationMessage For="@(()=>modelo.Descripcion)" />

            <div class="input-group mt-3">
                <span class="input-group-text bg-light" id="basic-addon3">@if (empleador) { @("Requisitos"); } else { @("Experiencia"); }</span>
                <input type="text" class="form-control" @bind-value="modelo.Requisitos">
            </div>
            <ValidationMessage For="@(()=>modelo.Requisitos)" />

            <div class="form-check form-switch mt-3" style="margin-left: 10px;margin-right: 10px;margin-top: 5px;margin-bottom: 5px;">
                <input class="form-check-input" type="checkbox" @bind-value="modelo.Activo">
                <label class="form-check-label" for="flexSwitchCheckDefault">Activo</label>
            </div>
            <div class="form-floating mt-3">
                <input class="form-control" id="inputFechaHoraInicio" type="datetime-local" placeholder="" @bind-value="modelo.FechaHoraInicio" autocomplete="off" />
                <label for="inputEmail">Fecha Hora Inicio Empleo</label>
            </div>
            <ValidationMessage For="@(()=>modelo.FechaHoraInicio)" />
            <div class="form-floating mt-3">
                <input class="form-control" id="inputFechaHoraFin" type="datetime-local" placeholder="" @bind-value="modelo.FechaHoraFin" autocomplete="off" />
                <label for="inputEmail">Fecha Hora Finaliza Empleo</label>
            </div>
            <ValidationMessage For="@(()=>modelo.FechaHoraFin)" />
            <div class="input-group mt-3">
                <span class="input-group-text bg-light" id="basic-addon3">Ubicación</span>
                <input type="text" class="form-control" @bind-value="modelo.Ubicacion">
            </div>
            <ValidationMessage For="@(()=>modelo.Ubicacion)" />

            <div class="input-group mt-3">
                <span class="input-group-text bg-light" id="basic-addon3">Valor del Empleo</span>
                <input type="number" class="form-control" @bind-value="modelo.Precio">
            </div>
            <ValidationMessage For="@(()=>modelo.Precio)" />

            <div class="input-group mt-3">
                <span class="input-group-text bg-light" id="basic-addon3">Precio Oferta del Empleo</span>
                <input type="number" class="form-control" @bind-value="modelo.PrecioOferta">
            </div>
            <ValidationMessage For="@(()=>modelo.PrecioOferta)" />
            <div class="form-floating mt-3">
                <input class="form-control" id="inputFechaHoraActiva" type="datetime-local" placeholder="" @bind-value="modelo.FechaHoraActiva" autocomplete="off" />
                <label for="inputEmail">Fecha Hora Activa Empleo</label>
            </div>
            <ValidationMessage For="@(()=>modelo.FechaHoraActiva)" />
            <div class="form-floating mt-3">
                <input class="form-control" id="inputFechaHoraFin" type="datetime-local" placeholder="" @bind-value="modelo.FechaHoraInactiva" autocomplete="off" />
                <label for="inputEmail">Fecha Hora Inactiva Empleo</label>
            </div>
            <ValidationMessage For="@(()=>modelo.FechaHoraInactiva)" />

            <div class="input-group mt-3">
                <span class="input-group-text bg-light" id="basic-addon3">Observaciones</span>
                <textarea class="form-control" @bind="modelo.Observaciones"></textarea>
            </div>
            <ValidationMessage For="@(()=>modelo.Observaciones)" />

            <div class="mt-3">
                <button type="submit" class="btn btn-primary" style="width:130px">@boton</button>
                <a href="/empleos" class="btn btn-secondary" style="width:130px">Volver</a>
            </div>
        </EditForm>
    </div>
</div>


@code {
    // HECHO : SE PUSO SOLAMENTE EL USUARIO SI ESCOJE VER EL EMPLEO COMO EMPLEADO O COMO EMPLEADOR. FINALIZA 25/FEB/2024 7:48PM
    // HECHO : HACER QUE SE VEAN SOLO LOS EMPLEOS QUE CREA EL USUARIO: FIN : 09/MAR/2024 5:10PM
    // HECHO : HACER QUE SE VEA EN OFERTA TODOS LOS EMPLEOS DE LA JAC LOCAL. FIN : 07/MAR/2024 8:00PM
    // HECHO : SE DEBE QUITAR LAS TABLAS "EMPLEADO" Y "EMPLEADOR" YA QUE NO CONTIENEN DATOS PROPIOS : INICIO : 26/FEB/2024 5:07PM : FIN : 26/FEB/2024 7:46PM
    // HECHO : REVISANDO CAMBIOS EN TABLAS DE "EMPLEO", "SERVICIO", "PROPUESTAEMPLEO" Y "PROPUESTASERVICIO" : INICIO : 26/FEB/2024 5:07PM :  FIN : 26/FEB/2024 7:46PM
    // HECHO : AGREGAR EL CAMPO IdEmpleado A "PROPUESTAEMPLEO" : INICIO : 26/FEB/2024 5:07PM  FIN : 26/FEB/2024 7:46PM
    // HECHO : HACER SCAFFOLDING DE NUEVO A LA BASE DE DATOS Y PASAR DATOS A REPOSITORIO. INICIO : 26/FEB/2024 5:10PM : FIN : 26/FEB/2024 7:46PM
    // POR HACER : AL PONER ACTIVO EL EMPLEO SE DEBE CREAR LA PROPUESTA DE EMPLEO DE UNA VEZ. FECHA: 15/MAR/2024 6.59PM
    [Parameter]
    public int Id { get; set; }
    public int IdPerfilCargo { get; set; } = 0;
    private string Titulo = "Nuevo Empleo";
    private string boton = "Crear";
    private List<PerfilCargoDTO> listaPerfilCargo = new List<PerfilCargoDTO>();
    private List<TipoContratoDTO> listaTipoContrato = new List<TipoContratoDTO>();
    private EmpleoDTO modelo = new EmpleoDTO();
    private bool empleador = true;
    private int userId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            userId = Convert.ToInt32(user.Claims.First(c => c.Type == ClaimTypes.NameIdentifier).Value);

        }
        var response = await perfilcargoServicio.Lista(userId,"");
        if (response.EsCorrecto)
        {
            listaPerfilCargo = (List<PerfilCargoDTO>)response.Resultado!;
            if (listaPerfilCargo.Any() && Id == 0)
            {
                modelo.PerfilCargoId = listaPerfilCargo.First().IdPerfilCargo;
                IdPerfilCargo = modelo.PerfilCargoId;
            }
        }
        var respTContrrato = await perfilcargoServicio.ListaTipoContrato("");
        if (respTContrrato.EsCorrecto)
        {
            listaTipoContrato = (List<TipoContratoDTO>)respTContrrato.Resultado;
        }

    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id != 0)
        {
            Titulo = "Editar Empleo";
            boton = "Actualizar";
            var response = await empleoServicio.Obtener(Id);
            if (response.EsCorrecto)
            {
                modelo = (EmpleoDTO)response.Resultado!;
                IdPerfilCargo = modelo.PerfilCargoId;
                if (modelo.EmpleadorId != null)
                {
                    empleador = true;
                    modelo.EmpleadoId = userId;
                    modelo.Cantidad = 1;
                }
                else
                {
                    empleador = false;
                    modelo.EmpleadoId = userId;
                    modelo.Cantidad = 1;
                }
            }
            else
            {
                toastService.ShowWarning(response.Mensaje);
            }
        }
        else
        {
            modelo.Cantidad = 1;
        }
        StateHasChanged();
    }

    private async Task CambiarCategoria(ChangeEventArgs e)
    {
        IdPerfilCargo = modelo.PerfilCargoId = Convert.ToInt32(e.Value);
    }

    void CambiarTipo(ChangeEventArgs e)
    {
        empleador = Convert.ToBoolean(e.Value.ToString());
        if (empleador)
        {
            modelo.EmpleadorId = userId;
            modelo.EmpleadoId = null;
        }
        else
        {
            modelo.EmpleadoId = userId;
            modelo.EmpleadorId = null;
            modelo.Cantidad = 1;
        }
    }

    private async Task GuardarCambios()
    {
        bool respuesta = true;
        string mensaje = string.Empty;
        //StateHasChanged();
        if (Id != 0)
        {
            var response = await empleoServicio.Editar(modelo);
            if (response.EsCorrecto)
            {
                mensaje = "Empleo fue modificado";
            }
            else
            {
                respuesta = false;
                mensaje = "No ser pudo editar";
            }
        }
        else
        {
            if (empleador)
            {
                modelo.EmpleadorId = userId;
                modelo.EmpleadoId = null;
            }
            else
            {
                modelo.EmpleadoId = userId;
                modelo.EmpleadorId = null;
            }
            var response = await empleoServicio.Crear(modelo);
            if (response.EsCorrecto)
            {
                mensaje = "Empleo fue creado";
            }
            else
            {
                respuesta = false;
                mensaje = "No se pudo crear";
            }
        }
        if (respuesta)
        {
            toastService.ShowSuccess(mensaje);
            _navServicio.NavigateTo("/empleos");
        }
        else
            toastService.ShowWarning(mensaje);
    }

}
