@page "/jac"
@page "/jac/{Id:int}"
@using BANCOEMPLEOJAC.DTO
@using BANCOEMPLEOJAC.WebAssembly.Servicio.Interfase
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization;

@inject IJacServicio jacServicio
@inject IUsuarioServicio usuarioServicio
@inject IToastService toastService
@inject NavigationManager _navServicio
@attribute [Authorize(Roles = "1")]


<div class="row justify-content-center  mt-3">
    <p class="col-sm-12 col-md-8 col-xl-10 h4 mt-2">@Titulo</p>
</div>
<div class="row justify-content-center  mt-3">
    <div class="col-sm-12 col-md-8 col-xl-10">
        <EditForm Model="modelo" OnValidSubmit="GuardarCambios">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <AuthorizeView Roles="1,2,3,4">
                <Authorized Context="Administrador">

                    <div class="input-group mt-3">
                        <label class="input-group-text bg-secondary text-light justify-content-center" for="inputGroupSelect01">Departamento</label>
                        <select class="form-control" @onchange="e => SeleccionaDepartamento(e.Value.ToString())">
                            @if (listaDepartamentos != null)
                            {
                                @foreach (var item in listaDepartamentos)
                                {
                                    <option value="@item.IdDepartamento">@item.Nombre</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="input-group mt-3">
                        <label class="input-group-text bg-secondary text-light justify-content-center" for="inputGroupSelect02">Región</label>
                        <select class="form-control" @onchange="e => SeleccionaRegion(e.Value.ToString())">
                            @if (listaRegiones != null)
                            {
                                @foreach (var item in listaRegiones)
                                {
                                    <option value="@item.IdRegion">@item.Nombre</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="input-group mt-3">
                        <label class="input-group-text bg-secondary text-light justify-content-center" for="inputGroupSelect03">Municipio</label>
                        <select class="form-control" @onchange="e => SeleccionaMunicipio(e.Value.ToString())">
                            @if (listaMunicipios != null)
                            {
                                @foreach (var item in listaMunicipios)
                                {
                                    <option value="@item.IdMunicipio">@item.Nombre</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="input-group mt-3">
                        @if(IdMunicipio.Count() > 0)
                        {
                          <a href="/zonavereda/@IdMunicipio" class="btn btn-secondary float-start oi oi-plus" style="width:45px"></a>
                        }
                        <label class="input-group-text bg-secondary text-light justify-content-center" for="inputGroupSelect04">Zona, Localidad o Vereda</label>
                        <select class="form-control" @bind-value="IdZonaVereda" @bind-value:event="onchange">
                            @if (listaZonaVeredas != null)
                            {
                                @foreach (var item in listaZonaVeredas)
                                {
                                    <option value="@item.IdzonaVereda">@item.Nombre</option>
                                }
                            }
                        </select>
                    </div>

                </Authorized>
            </AuthorizeView>

            <div class="input-group mt-3">
                <span class="input-group-text  bg-secondary text-light" id="">NIT</span>
                <input type="text" class="form-control" @bind-value="modelo.Nit">
            </div>

            <ValidationMessage For="@(()=>modelo.Nit)" />
            <div class="input-group mt-3">
                <span class="input-group-text  bg-secondary text-light" id="basic-addon3">Nombre JAC</span>
                <input type="text" class="form-control" @bind-value="modelo.Nombre">
            </div>
            <ValidationMessage For="@(()=>modelo.Nombre)" />

            <div class="input-group mt-3">
                <span class="input-group-text  bg-secondary text-light" id="basic-addon3">Número Registro Personería Jurídica</span>
                <input type="text" class="form-control" @bind-value="modelo.NumeroPersoneriaJuridica">
            </div>
            <ValidationMessage For="@(()=>modelo.NumeroPersoneriaJuridica)" />
            <div class="input-group mt-3">
                <span class="input-group-text  bg-secondary text-light" id="basic-addon3">Fecha Personería Jurídica</span>
                <input type="date" class="form-control" @bind-value="modelo.FechaRegistroPersoneriaJuridica"><br />
            </div>
            <ValidationMessage For="@(()=>modelo.FechaRegistroPersoneriaJuridica)" />


            <div class="input-group mt-3">
                <span class="input-group-text  bg-secondary text-light" id="basic-addon3">Delimitación:</span>
                <textarea class="form-control" @bind="modelo.Delimitacion"></textarea>
            </div>
            <div class="input-group mt-3">
                <div class="input-group-text form-control bg-secondary text-light justify-content-center" id="basic-addon3">Foto</div>
                @if (modelo.Foto != "")
                {
                    <div class="input-group mt-3 justify-content-center">
                        <img class="card-img-top border-dark border-1" src="@modelo.Foto" style="width:250px;height:250px">
                    </div>
                }
                <div class="input-group mt-3 justify-content-center  bg-secondary text-light">
                    <InputFile type="file" class="row form-control" accept="image/png, image/gif, image/jpeg" OnChange="OnFileChange"></InputFile>
                </div>
            </div>
            <ValidationMessage For="@(()=>modelo.Foto)" />
            <div class="input-group mt-3">
                <span class="input-group-text  bg-secondary text-light" id="basic-addon3">Observaciones</span>
                <textarea class="form-control" @bind="modelo.Observaciones"></textarea><br />
            </div>
            <ValidationMessage For="@(()=>modelo.Observaciones)" />

            <div class="mt-3 justify-content-center">
                <button type="submit" class="btn btn-primary" style="width:130px">@boton</button>
                <a href="/jacs" class="btn btn-secondary float-end" style="width:130px">Volver</a>
            </div>
        </EditForm>
    </div>
</div>

@code {
    // HECHO : SE PUEDA EDITAR Y CREAR UNA JAC : FECHA : 26/FEB/2024 9:53PM : FIN : 28/FEB/2024 12:02AM
    [Parameter]
    public int Id { get; set; }
    [Parameter]
    public string IdDepartamento { get; set; } = "";
    [Parameter]
    public string IdRegion { get; set; } = "";
    [Parameter]
    public string IdMunicipio { get; set; } = "";
    [Parameter]
    public string IdZonaVereda { get; set; } = "";
    private List<JacDTO> listaJac = new List<JacDTO>();
    private List<DepartamentoDTO> listaDepartamentos = new List<DepartamentoDTO>();
    private List<RegionesDTO> listaRegiones = new List<RegionesDTO>();
    private List<MunicipioDTO> listaMunicipios = new List<MunicipioDTO>();
    private List<ZonaVeredaDTO> listaZonaVeredas = new List<ZonaVeredaDTO>();


    private string Titulo = "Nueva JAC";
    private string boton = "Crear";
    private JacDTO modelo = new JacDTO();
    private UsuarioEditaDTO modelousuario = new UsuarioEditaDTO();

    protected override async Task OnInitializedAsync()
    {
        try
        {

            var response = await jacServicio.Lista("NA");
            if (response.EsCorrecto)
            {
                listaJac = (List<JacDTO>)response.Resultado!;
                if (listaJac.Any() && Id == 0)
                {
                    modelo.IdJac = listaJac.First().IdJac;
                }
            }

            var responseDepartamento = await jacServicio.ListaDepartamentos("NA");
            if (responseDepartamento.EsCorrecto)
            {
                listaDepartamentos = (List<DepartamentoDTO>)responseDepartamento.Resultado!;
                if (listaDepartamentos.Any() && IdDepartamento == "")
                {
                    IdDepartamento = listaDepartamentos.First().IdDepartamento;
                }
            }

            var responseRegion = await jacServicio.ListaRegiones("NA");
            if (responseRegion.EsCorrecto)
            {
                listaRegiones = (List<RegionesDTO>)responseRegion.Resultado!;
                if (listaRegiones.Any() && IdRegion == "")
                {
                    IdRegion = listaRegiones.First().IdRegion;
                }
            }

            var responseMunicipio = await jacServicio.ListaMunicipios("NA");
            if (responseMunicipio.EsCorrecto)
            {
                listaMunicipios = (List<MunicipioDTO>)responseMunicipio.Resultado!;
                if (listaMunicipios.Any() && IdMunicipio == "")
                {
                    IdMunicipio = listaMunicipios.First().IdMunicipio;
                }
            }

            var responseZonaVereda = await jacServicio.ListaZonaVeredas("NA");
            if (responseZonaVereda.EsCorrecto)
            {
                listaZonaVeredas = (List<ZonaVeredaDTO>)responseZonaVereda.Resultado!;
                if (listaZonaVeredas.Any() && IdMunicipio == "")
                {
                    IdZonaVereda = listaZonaVeredas.First().IdzonaVereda;
                }
            }


        }
        catch (Exception ex)
        {

            throw ex;
        }
    }
    protected override async Task OnParametersSetAsync()
    {
        if (Id != 0)
        {
            Titulo = "Editar JAC";
            boton = "Actualizar";
            var response = await jacServicio.Obtener(Id);
            if (response.EsCorrecto)
            {
                modelo = (JacDTO)response.Resultado!;
            }
            else
            {
                toastService.ShowWarning(response.Mensaje);
            }
        }
    }

    private async Task SeleccionaDepartamento(string IdDepartamento)
    {
        //IdDepartamento = Convert.ToString(args.Value);
        var responseRegion = await jacServicio.ListaRegiones(IdDepartamento);
        if (responseRegion.EsCorrecto)
        {
            listaRegiones = (List<RegionesDTO>)responseRegion.Resultado!;
            if (listaRegiones.Any() && IdDepartamento == "")
            {
                IdRegion = listaRegiones.First().IdRegion;
            }
            listaMunicipios = null;
            IdMunicipio = "";
            listaZonaVeredas = null;
            IdZonaVereda = "";
        }
        this.IdDepartamento = IdDepartamento;
    }

    private async Task SeleccionaRegion(string IdRegion)
    {
        //IdDepartamento = Convert.ToString(args.Value);
        var responseMunicipio = await jacServicio.ListaMunicipios(IdRegion);
        if (responseMunicipio.EsCorrecto)
        {
            listaMunicipios = (List<MunicipioDTO>)responseMunicipio.Resultado!;
            if (listaMunicipios.Any() && IdRegion == "")
            {
                IdMunicipio = listaMunicipios.First().IdMunicipio;
            }
            listaZonaVeredas = null;
            IdZonaVereda = "";
        }
        this.IdRegion = IdRegion;
    }

    private async Task SeleccionaMunicipio(string IdMunicipio)
    {
        //IdDepartamento = Convert.ToString(args.Value);
        var responseZonaVereda = await jacServicio.ListaZonaVeredas(IdMunicipio);
        if (responseZonaVereda.EsCorrecto)
        {
            listaZonaVeredas = (List<ZonaVeredaDTO>)responseZonaVereda.Resultado!;
            if (listaZonaVeredas.Any() && IdZonaVereda == "")
            {
                IdZonaVereda = listaZonaVeredas.First().IdzonaVereda;
            }
        }
        this.IdMunicipio = IdMunicipio;
        StateHasChanged();
    }


    async Task OnFileChange(InputFileChangeEventArgs e)
    {
        FileInfo fileInfo = new FileInfo(e.File.Name);
        if (fileInfo.Extension.ToLower().Contains(".jpg") || fileInfo.Extension.ToLower().Contains(".png"))
        {
            var format = $"image/{fileInfo.Extension.Replace(".", "")}";
            var resizeImage = await e.File.RequestImageFileAsync(format, 450, 300);
            var buffer = new byte[resizeImage.Size];
            await resizeImage.OpenReadStream().ReadAsync(buffer);
            var imagenData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            modelo.Foto = imagenData;
        }

    }
    private async Task GuardarCambios()
    {

        bool respuesta = true;
        string mensaje = string.Empty;
        if (Id != 0)
        {
            var response = await jacServicio.Editar(modelo);
            if (response.EsCorrecto)
            {
                mensaje = "JAC fue modificada";
            }
            else
            {
                respuesta = false;
                mensaje = "No ser pudo editar";
            }
        }
        else
        {
            // modelo.Rol = 1;
            // modelo = _map.Map<UsuarioEditaDTO>(modelo);
            // var response = await usuarioServicio.Crear(modelo);
            // if (response.EsCorrecto)
            // {
            //     mensaje = "Usuario fue creado";
            // }
            // else
            // {
            //     respuesta = false;
            //     mensaje = "No se pudo crear";
            // }
        }
        if (respuesta)
        {
            toastService.ShowSuccess(mensaje);
            _navServicio.NavigateTo("/jacs");
        }
        else
        {
            toastService.ShowWarning(mensaje);
        }
    }

}
