@page "/propuestaempleo"
@page "/propuestaempleo/{idPropuestaEmpleo:int}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims

@inject AuthenticationStateProvider AuthenticationStateProvider

@inject IPropuestaEmpleoServicio propuestaEmpleoServicio;
@inject IPerfilCargoServicio perfilcargoServicio
@inject IUsuarioServicio usuarioServicio

@inject IToastService toastService
@inject SweetAlertService Swal
@inject NavigationManager _navServicio

@attribute [Authorize(Roles = "1,2,3,4,5")]

<div class="container px-4 px-lg-5 my-5">

    <div>
        <h5>Proponer Cambios</h5>
    </div>

    @if (modelo != null)
    {
        <div class="row gx-4 gx-lg-5 align-items-center">
            <div class="col-md-6">

                <EditForm Model="modelo" OnValidSubmit="GuardarCambios">
                    <DataAnnotationsValidator></DataAnnotationsValidator>

                    <div class="input-group mt-3">
                        <h1 class="display-5 fw-bolder">@modelo.Nombre</h1>
                        <input type="text" hidden class="form-control" @bind-value="modelo.Nombre">
                    </div>
                    <ValidationMessage For="@(()=>modelo.Nombre)" />

                    <div class="input-group  mt-3">
                        <p class="lead">@modelo.Descripcion</p>
                        <input type="text" hidden class="form-control" @bind-value="modelo.Descripcion">
                    </div>
                    <ValidationMessage For="@(()=>modelo.Descripcion)" />

                    <div class="input-group mt-3">
                        <span class="input-group-text bg-light" id="basic-addon3">Requisitos</span>
                        <input type="text" class="form-control" @bind-value="modelo.Requisitos">
                    </div>
                    <ValidationMessage For="@(()=>modelo.Requisitos)" />

                    <div class="input-group mt-3">
                        <span class="input-group-text bg-light">Tipo Contrato</span>

                        <select class="form-control" @bind-value="IdTipoContrato" @bind-value:event="onchange">
                            @if (listaTipoContrato != null)
                            {
                                @foreach (var item in listaTipoContrato)
                                {
                                    if (item.IdTipoContrato == IdTipoContrato)
                                    {
                                        <option value="@item.IdTipoContrato" selected>@item.Nombre</option>
                                    }
                                    else
                                    {
                                        <option value="@item.IdTipoContrato">@item.Nombre</option>
                                    }
                                }
                            }
                        </select>
                    </div>

                    <div class="input-group mt-3">
                        <span class="input-group-text bg-light" id="basic-addon3">Orden</span>
                        <input type="number" disabled class="form-control" @bind-value="modelo.Orden">
                    </div>
                    <ValidationMessage For="@(()=>modelo.Orden)" />
                    <div class="form-floating mt-3">
                        <input class="form-control" id="inputFechaHoraInicio" type="datetime-local" placeholder="" @bind-value="modelo.FechaHoraInicio" autocomplete="off" />
                        <label for="inputEmail">Fecha Hora Inicio Empleo</label>
                    </div>
                    <ValidationMessage For="@(()=>modelo.FechaHoraInicio)" />
                    <div class="form-floating mt-3">
                        <input class="form-control" id="inputFechaHoraFin" type="datetime-local" placeholder="" @bind-value="modelo.FechaHoraFin" autocomplete="off" />
                        <label for="inputEmail">Fecha Hora Finaliza Empleo</label>
                    </div>
                    <ValidationMessage For="@(()=>modelo.FechaHoraFin)" />
                    <div class="input-group mt-3">
                        <span class="input-group-text bg-light" id="basic-addon3">Ubicación</span>
                        <input type="text" class="form-control" @bind-value="modelo.Ubicacion">
                    </div>
                    <ValidationMessage For="@(()=>modelo.Ubicacion)" />
                    <div class="input-group mt-3">
                        <span class="input-group-text bg-light" id="basic-addon3">Cantidad</span>
                        <input type="number" class="form-control" @bind-value="modelo.Cantidad">
                    </div>
                    <ValidationMessage For="@(()=>modelo.Cantidad)" />


                    <div class="input-group mt-3">
                        <span class="input-group-text bg-light" id="basic-addon3">Precio</span>
                        <input type="number" class="form-control" @bind-value="modelo.Valor">
                    </div>
                    <ValidationMessage For="@(()=>modelo.Valor)" />
                     <!--Empleador-->
                    <div class="input-group mt-3">
                        <span class="input-group-text bg-light" id="basic-addon3">Empleador :</span>
                        <input type="text" disabled class="form-control" value="@NombresApellidosEmpleador">
                        <input type="hidden" @bind="modelo.EmpleadorId">
                    </div>
                    <!--Empleado-->
                    <div class="input-group mt-3">
                        <span class="input-group-text bg-light" id="basic-addon3">Empleado :</span>
                        <input type="text" class="form-control" disabled value="@NombresApellidosEmpleado" >
                        <input type="hidden" @bind="modelo.EmpleadoId">
                    </div>
                    <div class="input-group mt-3">
                        <span class="input-group-text bg-light" id="basic-addon3">Observaciones</span>
                        <textarea class="form-control" @bind="modelo.Observaciones"></textarea>
                    </div>
                    <ValidationMessage For="@(()=>modelo.Observaciones)" />

                    <div class="mt-3">
                        <button type="submit" class="btn btn-primary" style="width:130px">@boton</button>
                        <a href="/ofertasempleos" class="btn btn-secondary" style="width:130px">Volver</a>
                    </div>
                </EditForm>
            </div>
        </div>
    }
    else
    {
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    }



</div>
@code {
    // HECHO : HACER QUE SE PUEDAN EDITAR LOS DATOS DE LA REPROPUESTA DE EMPLEO Y SE PUEDA GUARDAR LOS NUEVOS DATOS 24/FEB/2024 1:04PM : INICIO : 26/FEB/2024 10:12AM FIN: 11/MAR/2024 12:36AM
    // POR HACER :  INFORMAR AL EMPLEADOR Y/O EMPLEADO DE LOS CAMBIOS DE REPROPUESTA 11/MAR/2024 12:36AM
    // VOY : QUE EL EMPLEADOR  O EMPLEADO QUE PROPONEN QUEDE GRABADO EN EL REGISTRO CON SU ID CUANDO HACE LA PROPUESTA Y CUANDO HACE EL CONTRATO  : FECHA: 15/MAR/2024 11:33PM
    // POR HACER : DESPUES DE Z-DB PARA AGREGAR CODIGO EDITAR CAMPO IDTIPOCONTRATO FECHA: 15/MAR/2024 11:40PM
    [Parameter]
    public int idPropuestaEmpleo { get; set; }
    public List<TipoContratoDTO> listaTipoContrato = new List<TipoContratoDTO>();
    public int IdTipoContrato { get; set; }

    public int userId { get; set; }
    public PropuestaEmpleoDTO? modelo = new PropuestaEmpleoDTO();
    private string Titulo = "Nueva Propuesta Empleo";
    private string boton = "Proponer Cambios";
    private string NombresApellidos = "";
    private string NombresApellidosEmpleado = "";
    private string NombresApellidosEmpleador = "";

    private int cantidad = 1;
    private List<PerfilCargoDTO>? listaPerfilCargo = null;

    // protected override async Task OnParametersSetAsync()
    // {
    //     // var response = await propuestaEmpleoServicio.Obtener(idPropuestaEmpleo);
    //     // if (response.EsCorrecto)
    //     // {
    //     //     modelo = (PropuestaEmpleoDTO)response.Resultado!;
    //     //     modelo.Orden += 1;
    //     //     IdTipoContrato = (int)modelo.Empleo.PerfilCargo.IdTipoContrato!;
    //     //     //idPropuestaEmpleo = null; 
    //     //     modelo.IdPropuestaEmpleo = null;
    //     // }
    //     // else
    //     //     toastService.ShowWarning(response.Mensaje);

    //     // StateHasChanged();

    // }
    protected override async Task OnInitializedAsync()
    {
        // se obtiene la propuesta
        var response = await propuestaEmpleoServicio.Obtener(idPropuestaEmpleo);
        if (response.EsCorrecto)
        {
            modelo = (PropuestaEmpleoDTO)response.Resultado!;
            modelo.Orden += 1;
            IdTipoContrato = (int)modelo.Empleo.PerfilCargo.IdTipoContrato!;
            modelo.IdPropuestaEmpleo = null;
        }
        else
            toastService.ShowWarning(response.Mensaje);


        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            userId = Convert.ToInt32(user.Claims.First(c => c.Type == ClaimTypes.NameIdentifier).Value);
            NombresApellidos = string.Concat(user.Claims.First(c => c.Type == ClaimTypes.Name).Value.ToString()," ",
            user.Claims.First(c => c.Type == ClaimTypes.Surname).Value.ToString()); 
            if (modelo.EmpleadorId == null && modelo.EmpleadoId != null)
            {
                modelo.EmpleadorId = userId;
                NombresApellidosEmpleador = await ObtenerNombresApellidos(userId);
                NombresApellidosEmpleado = await ObtenerNombresApellidos(modelo.EmpleadoId.Value);
            }
            if (modelo.EmpleadorId != null && modelo.EmpleadoId == null)
            {
                modelo.EmpleadoId = userId;
                NombresApellidosEmpleado = await ObtenerNombresApellidos(userId);
                NombresApellidosEmpleador = await ObtenerNombresApellidos(modelo.EmpleadorId.Value);
            }
        }
        await ObtenerPerfilesCargos();
        await ListarTipoContrato();
     }

    private async Task ObtenerPerfilesCargos(string Valor = "")
    {
        var response = await perfilcargoServicio.Lista(userId,Valor);
        if (response.EsCorrecto)
        {
            listaPerfilCargo = (List<PerfilCargoDTO>)response.Resultado!;
        }
        else
        {
            listaPerfilCargo = new List<PerfilCargoDTO>();
        }
    }
    private async Task<string> ObtenerNombresApellidos(int UserId)
    {
        var response = await usuarioServicio.Obtener(UserId);
        if (response.EsCorrecto)
        {
            return response.Resultado.Nombres.ToString() + " " + response.Resultado.Apellidos.ToString();
        }
        return "";
    }

    public async Task ListarTipoContrato(string Valor = "")
    {
        var response = await perfilcargoServicio.ListaTipoContrato(Valor);

        if (response.EsCorrecto!)
        {
            listaTipoContrato = (List<TipoContratoDTO>)response.Resultado!;
            IdTipoContrato = listaTipoContrato.FirstOrDefault().IdTipoContrato;
        }
        else
        {
            listaTipoContrato = new List<TipoContratoDTO>();
        }
        StateHasChanged();
    }


    private async Task GuardarCambios()
    {
        bool respuesta = true;
        string mensaje = string.Empty;
        //StateHasChanged();
        // if (idPropuestaEmpleo != 0)
        // {
        //     var response = await propuestaEmpleoServicio.Editar(modelo);
        //     if (response.EsCorrecto)
        //     {
        //         mensaje = "Propuesta Empleo fue modificada";
        //     }
        //     else
        //     {
        //         respuesta = false;
        //         mensaje = "No ser pudo editar";
        //     }
        // }
        // else
        // {
            if (modelo.IdPropuestaEmpleo == null)
            {
                
                modelo.RePropone = true;
                modelo.FechaHoraReProponeEmpleador = DateTime.Now;
                modelo.PropuestaEmpleoAnteriorId = idPropuestaEmpleo;
                var response = await propuestaEmpleoServicio.Crear(modelo);
                if (response.EsCorrecto)
                {
                    mensaje = "RePropuesta Empleo fue creada";
                }
                else
                {
                    respuesta = false;
                    mensaje = "No se pudo crear : " + response.Mensaje;
                }
            }
      //  }
        if (respuesta)
        {
            toastService.ShowSuccess(mensaje);
            _navServicio.NavigateTo("/ofertasempleos");
        }
        else
            toastService.ShowWarning(mensaje);
    }

}
