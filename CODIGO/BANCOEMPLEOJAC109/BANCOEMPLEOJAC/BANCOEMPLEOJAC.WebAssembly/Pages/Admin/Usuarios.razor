@page "/usuarios"
@using BANCOEMPLEOJAC.DTO
@using BANCOEMPLEOJAC.WebAssembly.Servicio.Interfase
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization;

@inject IUsuarioServicio usuarioServicio
@inject IRolServicio rolServicio
@inject IToastService toastService
@inject SweetAlertService Swal
@using System.Security.Claims;
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider autenticacionProvider;

@attribute [Authorize(Roles = "1,2,3,4")]

<div class="row justify-content-center  mt-3">
    <div class="col-sm-6 col-md-4 col-xl-3 mb-4">
        <div class="d-grid gap-1 col-12 mx-auto">
            <a class="btn btn-primary" href="/registro">Nuevo usuario</a>
        </div>
    </div>
    <div class="col-sm-6 col-md-8 col-xl-9 mb-4">
        <div class="input-group mb-3">
            <input type="text" class="form-control" placeholder="Buscar usuario..." @bind-value="buscar">
            <div class="form-check form-switch" style="margin-left: 10px;margin-right: 10px;margin-top: 5px;margin-bottom: 5px;">
                <label class="input-group-text bg-light justify-content-center" for="inputGroupSelect01">Rol Usuario</label>
                <select class="form-control" @bind-value="IdRol" @bind-value:event="onchange">
                    <option value="0">Todos...</option>
                    @if(listaRol != null){
                        @foreach (var item in listaRol)
                        {
                            <option value="@item.IdRol">@item.Nombre</option>
                        }
                    }
                </select>
            </div>
            <button class="btn btn-outline-secondary" type="button" @onclick="(async()=> await ObtenerUsuarios(IdRol,buscar))">
                <i class="oi oi-magnifying-glass"></i>
            </button>
        </div>
    </div>
</div>

<div class="row gx-4 row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-xl-4 justify-content-start mt-2">

    @if (lista != null)
    {
        foreach (var item in lista)
        {
            <div class="col mb-5">
                <div class="card h-100">
                    <div class="card-body p-4">
                        <div class="text-center">
                            @if(item.Foto != null)
                            {
                                <img class="card-img-top border-dark border-1" src="@item.Foto" style="width:150px;height:150px">

                            }
                            else
                            {
                               <i class="oi oi-person" style="font-size:50px"></i>
                             
                            }
                        </div>
                        <div class="text-start">
                            <p class="m-1"><b>Nombre: </b>@item.Nombres</p>
                            <p class="m-1"><b>Apellidos: </b>@item.Apellidos</p>
                            <p class="m-1"><b>Correo: </b>@item.Correo</p>
                            <p class="m-1 fw-bold justify-content-center"><b>Rol: </b>@listaRol.Where(u => u.IdRol == item.Rol).FirstOrDefault().Nombre </p>
                        </div>
                    </div>
                    <div class="card-footer bg-transparent">
                        <div class="row justify-content-between">
                            <a class="col-5 btn btn-sm btn-outline-primary mt-auto" href="/usuario/@item.IdUsuario"><i class="oi oi-pencil fs-5"></i></a>
                            <button class="col-5 btn btn-sm btn-outline-danger mt-auto" type="button" @onclick="(async () => await Eliminar(item))">
                                <i class="oi oi-trash fs-5"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    }

</div>
@code {
    // HECHO : QUE LOS USUARIOS ADMINISTRADORES SOLO PUEDAN VER LOS USUARIOS ADMINISTRADORES Y OTROS MAYORES DEL ROL AL QUE PERTENECEN 23/FEB/2024 2:00PM : FIN 15/MAR2024 1:25PM

    [Parameter]
    public int IdRol { get; set; } = 6;
    [Parameter]
    public List<RolDTO>? listaRol { get; set; } = null;
    private List<UsuarioDTO>? lista = null;
    private string buscar = "";
    private bool clientes = false;
    private int UsuarioId;
    private int RolId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await autenticacionProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        UsuarioId = Convert.ToInt32(user.Claims.Where(c => c.Type == ClaimTypes.NameIdentifier).Select(c => c.Value).SingleOrDefault().ToString());
        RolId = Convert.ToInt32(user.Claims.Where(c => c.Type == ClaimTypes.Role).Select(c => c.Value).SingleOrDefault().ToString());


        await ObtenerRoles();
        await ObtenerUsuarios();
    }

    private async Task ObtenerRoles(string Valor = "")
    {
        var response = await rolServicio.Lista(UsuarioId, Valor);

        if (response.EsCorrecto!)
        {
            listaRol = (List<RolDTO>)response.Resultado!;
        }
        else
        {
            listaRol = new List<RolDTO>();
        }
    }

    private async Task ObtenerUsuarios(int idRol = 0, string Valor = "NA")
    {
        if (String.IsNullOrEmpty(Valor)) Valor = "NA";
        var response = await usuarioServicio.Lista(idRol, Valor, UsuarioId);

        if (response.EsCorrecto!)
        {
            lista = (List<UsuarioDTO>)response.Resultado!;
        }
        else
        {
            lista = new List<UsuarioDTO>();
        }
    }

    void CambiarRoles(ChangedEventArgs e)
    {
        IdRol = Convert.ToInt32(e.NewValue.ToString());

    }

    private async Task Eliminar(UsuarioDTO modelo)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Esta seguro?",
                Text = $"Eliminar usuario: {modelo.Nombres}",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Si, eliminar",
                CancelButtonText = "No, volver",
            });
        if (result.IsConfirmed)
        {
            var response = await usuarioServicio.Eliminar(modelo.IdUsuario);
            if (response.EsCorrecto)
            {
                await ObtenerUsuarios();
                toastService.ShowSuccess("Usuario fue eliminado");
            }
            else
            {
                toastService.ShowWarning(response.Mensaje);
            }
        }
    }
}
