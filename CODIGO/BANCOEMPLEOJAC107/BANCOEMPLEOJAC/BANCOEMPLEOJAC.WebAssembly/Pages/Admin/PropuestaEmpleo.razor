@page "/propuestaempleo/{idPropuestaEmpleo:int}"
@using Microsoft.AspNetCore.Authorization

@inject IPropuestaEmpleoServicio propuestaEmpleoServicio;
@inject IPerfilCargoServicio perfilcargoServicio

@inject IToastService toastService
@inject SweetAlertService Swal
@inject NavigationManager _navServicio

@attribute [Authorize(Roles = "1,2,3,4,5")]

<div class="container px-4 px-lg-5 my-5">

    <div>
        <h5>Proponer Cambios</h5>
    </div>

    @if (modelo != null)
    {
        <div class="row gx-4 gx-lg-5 align-items-center">
            <div class="col-md-6">

                <EditForm Model="modelo" OnValidSubmit="GuardarCambios">

                    <DataAnnotationsValidator></DataAnnotationsValidator>

                    <div class="input-group mt-3">
                        <h1 class="display-5 fw-bolder">@modelo.Nombre</h1>
                    </div>

                    <div class="input-group  mt-3">
                        <p class="lead">@modelo.Descripcion</p>

                    </div>
                    <ValidationMessage For="@(()=>modelo.Descripcion)" />
                    <div class="input-group mt-3">
                        <span class="input-group-text bg-light" id="basic-addon3">Requisitos</span>
                        <input type="text" class="form-control" @bind-value="modelo.Requisitos">
                    </div>
                    <ValidationMessage For="@(()=>modelo.Requisitos)" />
                    <div class="form-floating mt-3">
                        <input class="form-control" id="inputFechaHoraInicio" type="datetime-local" placeholder="" @bind-value="modelo.FechaHoraInicio" autocomplete="off" />
                        <label for="inputEmail">Fecha Hora Inicio Empleo</label>
                    </div>
                    <ValidationMessage For="@(()=>modelo.FechaHoraInicio)" />
                    <div class="form-floating mt-3">
                        <input class="form-control" id="inputFechaHoraFin" type="datetime-local" placeholder="" @bind-value="modelo.FechaHoraFin" autocomplete="off" />
                        <label for="inputEmail">Fecha Hora Finaliza Empleo</label>
                    </div>
                    <ValidationMessage For="@(()=>modelo.FechaHoraFin)" />
                    <div class="input-group mt-3">
                        <span class="input-group-text bg-light" id="basic-addon3">Ubicación</span>
                        <input type="text" class="form-control" @bind-value="modelo.Ubicacion">
                    </div>
                    <ValidationMessage For="@(()=>modelo.Ubicacion)" />
                    <div class="input-group mt-3">
                        <span class="input-group-text bg-light" id="basic-addon3">Cantidad</span>
                        <input type="number" class="form-control" @bind-value="modelo.Cantidad">
                    </div>
                    <ValidationMessage For="@(()=>modelo.Cantidad)" />


                    <div class="input-group mt-3">
                        <span class="input-group-text bg-light" id="basic-addon3">Precio</span>
                        <input type="number" class="form-control" @bind-value="modelo.Valor">
                    </div>
                    <ValidationMessage For="@(()=>modelo.Valor)" />

                    <div class="input-group mt-3">
                        <span class="input-group-text bg-light" id="basic-addon3">Empleado Id</span>
                        <input type="text" class="form-control" @bind-value="modelo.EmpleadoId">
                    </div>
                    <ValidationMessage For="@(()=>modelo.EmpleadoId)" />
                    <div class="input-group mt-3">
                        <span class="input-group-text bg-light" id="basic-addon3">Empleador Id</span>
                        <input type="text" class="form-control" @bind-value="modelo.Empleo.EmpleadorId">
                    </div>
                    <ValidationMessage For="@(()=>modelo.Empleo.EmpleadorId)" />
                    <div class="input-group mt-3">
                        <span class="input-group-text bg-light" id="basic-addon3">Observaciones</span>
                        <textarea class="form-control" @bind="modelo.Observaciones"></textarea>
                    </div>
                    <ValidationMessage For="@(()=>modelo.Observaciones)" />

                    <div class="mt-3">
                        <button type="submit" class="btn btn-primary" style="width:130px">@boton</button>
                        <a href="/ofertasempleos" class="btn btn-secondary" style="width:130px">Volver</a>
                    </div>
                </EditForm>




            </div>
        </div>
    }
    else
    {
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    }



</div>
@code {
    // VOY : HACER QUE SE PUEDAN EDITAR LOS DATOS DE LA REPROPUESTA DE EMPLEO Y SE PUEDA GUARDAR LOS NUEVOS DATOS E INFORMAR AL EMPLEADOR Y/O EMPLEADO 24/FEB/2024 1:04PM
    [Parameter]
    public int idPropuestaEmpleo { get; set; }
    public PropuestaEmpleoDTO? modelo = new PropuestaEmpleoDTO();
    private string Titulo = "Nueva Propuesta Empleo";
    private string boton = "Proponer Cambios";

    private int cantidad = 1;
    private List<PerfilCargoDTO>? listaPerfilCargo = null;

    protected override async Task OnParametersSetAsync()
    {
        var response = await propuestaEmpleoServicio.Obtener(idPropuestaEmpleo);
        if (response.EsCorrecto)
             modelo = (PropuestaEmpleoDTO)response.Resultado!;
             
    }
    protected override async Task OnInitializedAsync()
    {
        await ObtenerPerfilesCargos();
    }

    private async Task ReProponerEmpleo(PropuestaEmpleoDTO modelo)
    {
        //await propuestaEmpleoServicio.Crear(modelo);

    }

    private async Task ObtenerPerfilesCargos(string Valor = "")
    {
        var response = await perfilcargoServicio.Lista(Valor);
        if (response.EsCorrecto)
        {
            listaPerfilCargo = (List<PerfilCargoDTO>)response.Resultado!;
        }
        else
        {
            listaPerfilCargo = new List<PerfilCargoDTO>();
        }
    }



    private async Task GuardarCambios()
    {
        bool respuesta = true;
        string mensaje = string.Empty;
        //StateHasChanged();
        if (idPropuestaEmpleo != 0)
        {
            var response = await propuestaEmpleoServicio.Editar(modelo);
            if (response.EsCorrecto)
            {
                mensaje = "Propuesta Empleo fue modificada";
            }
            else
            {
                respuesta = false;
                mensaje = "No ser pudo editar";
            }
        }
        else
        {
            var response = await propuestaEmpleoServicio.Crear(modelo);
            if (response.EsCorrecto)
            {
                mensaje = "Propuesta Empleo fue creada";
            }
            else
            {
                respuesta = false;
                mensaje = "No se pudo crear";
            }
        }
        if (respuesta)
        {
            toastService.ShowSuccess(mensaje);
            _navServicio.NavigateTo("/ofertasempleos");
        }
        else
            toastService.ShowWarning(mensaje);
    }

}
