@page "/empleo"
@page "/empleo/{Id:int}"
@using Microsoft.AspNetCore.Authorization

@inject IEmpleoServicio empleoServicio
@inject IPerfilCargoServicio perfilcargoServicio
@inject IToastService toastService
@inject NavigationManager _navServicio

@attribute [Authorize(Roles = "1")]



<div class="row justify-content-center  mt-3">
    <p class="col-sm-12 col-md-8 col-xl-10 h4 mt-2">@Titulo</p>
</div>
<div class="row justify-content-center  mt-3">
    <div class="col-sm-12 col-md-8 col-xl-10">

        <EditForm Model="modelo" OnValidSubmit="GuardarCambios">
            <DataAnnotationsValidator></DataAnnotationsValidator>

            <div class="input-group mt-3">
                <label class="input-group-text bg-light" for="inputGroupSelect01">Perfil o Cargo</label>
                <select class="form-control" @bind="@modelo.PerfilCargoId">
                    @foreach (var item in listaPerfilCargo)
                    {
                        <option value="@item.IdPerfilCargo">@item.Descripcion</option>
                    }
                </select>
            </div>
            <div class="input-group mt-3">
                <span class="input-group-text bg-light" id="basic-addon3">Nombre</span>
                <input type="text" class="form-control" @bind-value="modelo.Nombre">
            </div>
            <ValidationMessage For="@(()=>modelo.Nombre)" />

            <div class="input-group  mt-3">
                <span class="input-group-text bg-light">Descripcion</span>
                <input type="text" class="form-control" @bind-value="modelo.Descripcion"></input>

            </div>
            <ValidationMessage For="@(()=>modelo.Descripcion)" />
            <div class="input-group mt-3">
                <span class="input-group-text bg-light" id="basic-addon3">Requisitos</span>
                <input type="text" class="form-control" @bind-value="modelo.Requisitos">
            </div>
            <ValidationMessage For="@(()=>modelo.Requisitos)" />
            <div class="form-check form-switch mt-3" style="margin-left: 10px;margin-right: 10px;margin-top: 5px;margin-bottom: 5px;">
                <input class="form-check-input" type="checkbox" @bind-value="modelo.Activo">
                <label class="form-check-label" for="flexSwitchCheckDefault">Activo</label>
            </div>
            <div class="form-floating mt-3">
                <input class="form-control" id="inputFechaHoraInicio" type="datetime" placeholder="" @bind-value="modelo.FechaHoraInicio" autocomplete="off" />
                <label for="inputEmail">Fecha Hora Inicio Empleo</label>
            </div>
            <ValidationMessage For="@(()=>modelo.FechaHoraInicio)" />
            <div class="form-floating mt-3">
                <input class="form-control" id="inputFechaHoraFin" type="datetime" placeholder="" @bind-value="modelo.FechaHoraFin" autocomplete="off" />
                <label for="inputEmail">Fecha Hora Finaliza Empleo</label>
            </div>
            <ValidationMessage For="@(()=>modelo.FechaHoraFin)" />
            <div class="input-group mt-3">
                <span class="input-group-text bg-light" id="basic-addon3">Ubicación</span>
                <input type="text" class="form-control" @bind-value="modelo.Ubicacion">
            </div>
            <ValidationMessage For="@(()=>modelo.Ubicacion)" />
            <div class="input-group mt-3">
                <span class="input-group-text bg-light" id="basic-addon3">Cantidad</span>
                <input type="number" class="form-control" @bind-value="modelo.Cantidad">
            </div>
            <ValidationMessage For="@(()=>modelo.Cantidad)" />


            <div class="input-group mt-3">
                <span class="input-group-text bg-light" id="basic-addon3">Precio</span>
                <input type="number" class="form-control" @bind-value="modelo.Precio">
            </div>
            <ValidationMessage For="@(()=>modelo.Precio)" />

            <div class="input-group mt-3">
                <span class="input-group-text bg-light" id="basic-addon3">Precio Oferta</span>
                <input type="number" class="form-control" @bind-value="modelo.PrecioOferta">
            </div>
            <ValidationMessage For="@(()=>modelo.PrecioOferta)" />
            <div class="form-floating mt-3">
                <input class="form-control" id="inputFechaHoraActiva" type="datetime" placeholder="" @bind-value="modelo.FechaHoraActiva" autocomplete="off" />
                <label for="inputEmail">Fecha Hora Activa Empleo</label>
            </div>
            <ValidationMessage For="@(()=>modelo.FechaHoraActiva)" />
            <div class="form-floating mt-3">
                <input class="form-control" id="inputFechaHoraFin" type="datetime" placeholder="" @bind-value="modelo.FechaHoraInactiva" autocomplete="off" />
                <label for="inputEmail">Fecha Hora Inactiva Empleo</label>
            </div>
            <ValidationMessage For="@(()=>modelo.FechaHoraInactiva)" />
            <div class="input-group mt-3">
                <span class="input-group-text bg-light" id="basic-addon3">Empleador Id</span>
                <input type="text" class="form-control" @bind-value="modelo.EmpleadorId">
            </div>
            <ValidationMessage For="@(()=>modelo.EmpleadorId)" />
            <div class="input-group mt-3">
                <span class="input-group-text bg-light" id="basic-addon3">Empleado Id</span>
                <input type="text" class="form-control" @bind-value="modelo.EmpleadoId">
            </div>
            <ValidationMessage For="@(()=>modelo.EmpleadoId)" />
            <div class="input-group mt-3">
                <span class="input-group-text bg-light" id="basic-addon3">Observaciones</span>
                <textarea class="form-control" @bind="modelo.Observaciones"></textarea>
            </div>
            <ValidationMessage For="@(()=>modelo.Observaciones)" />

            <div class="mt-3">
                <button type="submit" class="btn btn-primary" style="width:130px">@boton</button>
                <a href="/empleos" class="btn btn-secondary" style="width:130px">Volver</a>
            </div>
        </EditForm>
    </div>
</div>


@code {
    [Parameter]
    public int Id { get; set; }
    private string Titulo = "Nuevo Empleo";
    private string boton = "Crear";
    private List<PerfilCargoDTO> listaPerfilCargo = new List<PerfilCargoDTO>();
    private EmpleoDTO modelo = new EmpleoDTO();

    protected override async Task OnInitializedAsync()
    {
        var response = await perfilcargoServicio.Lista("");
        if (response.EsCorrecto)
        {
            listaPerfilCargo = (List<PerfilCargoDTO>)response.Resultado!;
            if (listaPerfilCargo.Any() && Id == 0)
            {
                modelo.PerfilCargoId = listaPerfilCargo.First().IdPerfilCargo;
            }
        }
    }

    // POR HACER : HACER QUE SE VEAN SOLO LOS EMPLEOS QUE CREA EL USUARIO
    // POR HACER : HACER QUE SE VEA EN OFERTA TODOS LOS EMPLEOS DE LA JAC LOCAL.


    protected override async Task OnParametersSetAsync()
    {
        if (Id != 0)
        {
            Titulo = "Editar Empleo";
            boton = "Actualizar";

            var response = await empleoServicio.Obtener(Id);
            if (response.EsCorrecto)
            {
                modelo = (EmpleoDTO)response.Resultado!;
            }
            else
            {
                toastService.ShowWarning(response.Mensaje);
            }
        }
        StateHasChanged();
    }
    void CambiarCategoria(ChangedEventArgs e)
    {
        modelo.PerfilCargoId = Convert.ToInt32(e.NewValue.ToString());

    }

    // async Task OnFileChange(InputFileChangeEventArgs e)
    // {
    //     FileInfo fileInfo = new FileInfo(e.File.Name);
    //     if (fileInfo.Extension.ToLower().Contains(".jpg") || fileInfo.Extension.ToLower().Contains(".png"))
    //     {
    //         var format = $"image/{fileInfo.Extension.Replace(".", "")}";
    //         var resizeImage = await e.File.RequestImageFileAsync(format, 450, 300);
    //         var buffer = new byte[resizeImage.Size];
    //         await resizeImage.OpenReadStream().ReadAsync(buffer);
    //         var imagenData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
    //         modelo.Foto = imagenData;
    //     }

    // }

    private async Task GuardarCambios()
    {
        bool respuesta = true;
        string mensaje = string.Empty;
        //StateHasChanged();
        if (Id != 0)
        {
            var response = await empleoServicio.Editar(modelo);
            if (response.EsCorrecto)
            {
                mensaje = "Empleo fue modificado";
            }
            else
            {
                respuesta = false;
                mensaje = "No ser pudo editar";
            }
        }
        else
        {
            var response = await empleoServicio.Crear(modelo);
            if (response.EsCorrecto)
            {
                mensaje = "Empleo fue creado";
            }
            else
            {
                respuesta = false;
                mensaje = "No se pudo crear";
            }
        }
        if (respuesta)
        {
            toastService.ShowSuccess(mensaje);
            _navServicio.NavigateTo("/empleos");
        }
        else
            toastService.ShowWarning(mensaje);
    }

}
