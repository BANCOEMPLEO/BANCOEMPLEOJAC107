@page "/categoria"
@page "/categoria/{Id:int}"
@using BANCOEMPLEOJAC.Modelo
@using BANCOEMPLEOJAC.Repositorio.Interfase
@using BANCOEMPLEOJAC.WebAssembly.Servicio.Implementacion
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IActividadEconomicaServicio _actividadEcoServicio

@inject ICategoriaServicio categoriaServicio
@inject IToastService toastService
@inject NavigationManager _navServicio
@attribute [Authorize(Roles = "1")]


<div class="row justify-content-center  mt-3">
    <p class="col-sm-12 col-md-8 col-xl-10 h4 mt-2">@Titulo</p>
</div>
<div class="row justify-content-center  mt-3">
    <div class="col-sm-12 col-md-8 col-xl-10">

        <EditForm Model="modelo" OnValidSubmit="GuardarCambios">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <div class="input-group mt-3">
                <span class="input-group-text bg-light">Nombre</span>
                <input type="text" class="form-control" @bind-value="modelo.Nombre">
            </div>
            <ValidationMessage For="@(()=>modelo.Descripcion)" />
            <div class="input-group mt-3">
                <span class="input-group-text bg-light">Descripción</span>
                <input type="text" class="form-control" @bind-value="modelo.Descripcion">
            </div>
            <ValidationMessage For="@(()=>modelo.Descripcion)" />
            <div class="input-group mt-3">
                <span class="input-group-text bg-light">Caracteríticas</span>
                <input type="text" class="form-control" @bind-value="modelo.Caracteristicas">
            </div>
            <ValidationMessage For="@(()=>modelo.Caracteristicas)" />
            <div class="input-group mt-3">
                <span class="input-group-text bg-light">Valor Acumulado</span>
                <input type="text" class="form-control" @bind-value="modelo.Valor">
            </div>
            <div class="mb-3">
                <label class="input-group-text bg-light justify-content-center" for="inputGroupSelect01">Actividad Económica</label>
                <select class="form-control" @bind="@modelo.ActividadEconomicaId">
                    @foreach (var item in listActividadEconomica)
                    {
                        <option value="@item.IdActividad">@item.Descripcion</option>
                    }
                </select>
            </div>
            <div class="input-group mt-3">
                <span class="input-group-text bg-light">Tipo Contrato</span>
                <input type="text" class="form-control" @bind-value="modelo.TipoContratoId">
            </div>
            <div class="input-group mt-3" >
                <span class="input-group-text bg-light">JacId</span>
                <input type="text" class="form-control" @bind-value="modelo.JacId">
            </div>
            <div class="input-group mt-3">
                <span class="input-group-text bg-light">Observaciones</span>
                <input type="text" class="form-control" @bind-value="modelo.Observaciones">
            </div>
            <ValidationMessage For="@(()=>modelo.Observaciones)" />

            <div class="mt-3">
                <button type="submit" class="btn btn-primary" style="width:130px">@boton</button>
                <a href="/categorias" class="btn btn-secondary" style="width:130px">Volver</a>
            </div>
        </EditForm>


    </div>

</div>
@code {
    [Parameter]
    public int Id { get; set; }
    private string Titulo = "Nueva Categoria";
    private string boton = "Crear";
    private CategoriaDTO modelo = new CategoriaDTO();
    public List<ActividadEconomicaDTO> listActividadEconomica = new List<ActividadEconomicaDTO>();
    protected override async Task OnParametersSetAsync()
    {
        if (Id != 0)
        {
            Titulo = "Editar Categoria";
            boton = "Actualizar";

            var response = await categoriaServicio.Obtener(Id);
            if (response.EsCorrecto)
            {
                modelo = (CategoriaDTO)response.Resultado!;
            }
            else
            {
                toastService.ShowWarning(response.Mensaje);
            }
        }
        // modelo.ActividadEconomicaId = 8;
        modelo.TipoContratoId = 1;
        modelo.JacId = 1;
        ObtenerActividadEconomica();

    }
    protected override async Task OnInitializedAsync()
    {
        ObtenerActividadEconomica();

    }
    public async Task ObtenerActividadEconomica(string Valor = "")
    {
        var response = await _actividadEcoServicio.Lista(Valor);

        if (response.EsCorrecto!)
        {
            listActividadEconomica = (List<ActividadEconomicaDTO>)response.Resultado!;
        }
        else
        {
            listActividadEconomica = new List<ActividadEconomicaDTO>();
        }
        StateHasChanged();
    }
    private async Task GuardarCambios()
    {

        bool respuesta = true;
        string mensaje = string.Empty;

        if (Id != 0)
        {
            var response = await categoriaServicio.Editar(modelo);
            if (response.EsCorrecto)
            {
                mensaje = "Categoria fue modificada";
            }
            else
            {
                respuesta = false;
                mensaje = "No se pudo editar";
            }
        }
        else
        {
            // adiciona modelo
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            // Get the claim value
            var claimValue = user.FindFirst(c => c.Type == "Locality")?.Value;

            // Add the claim value to the model before creating

            modelo.JacId = 1;// Convert.ToInt32(claimValue); //1;// Convert.ToInt32(user.FindFirst(c => c.Type == "Locality")?.Value);
            var response = await categoriaServicio.Crear(modelo);
            if (response.EsCorrecto)
            {
                mensaje = "Categoria fue creada";
            }
            else
            {
                respuesta = false;
                mensaje = "No se pudo crear";
            }
        }
        if (respuesta)
        {
            toastService.ShowSuccess(mensaje);
            _navServicio.NavigateTo("/categorias");
        }
        else
        {
            toastService.ShowWarning(mensaje);
        }
    }

}
