@page "/ofertasempleos"

@inject IPropuestaEmpleoServicio propuestaempleoServicio
@inject IPerfilCargoServicio perfilcargoServicio
@inject NavigationManager _navServicio


<div class="row justify-content-center mt-3 mb-4">

    <div class="col-sm-6 col-md-8 col-xl-9">
        <div class="input-group mb-3">
            <input type="text" class="form-control" placeholder="Buscar producto..." @bind-value="buscar">
@*             <button class="btn btn-outline-secondary" type="button" @onclick="(async () => await  ObtenerCatalogo())">
 *@                <button class="btn btn-outline-secondary" type="button" >
                    <i class="oi oi-magnifying-glass"></i>
            </button>
        </div>
    </div>
</div>



<div class="row">
    <div class="col-sm-3">


        <div class="card">
            <div class="card-header text-white bg-dark">
                Perfiles o Cargos
            </div>
            <div class="card-body">
                @if (listaCategoria != null)
                {
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="categoria" id="Todos" value="0"
                               @onchange="RadioSeleccion"
                               checked=@(categoriaSeleccionada.Equals(0))>
                        <label class="form-check-label" for="Todos">
                            Todos
                        </label>
                    </div>
                    @foreach (var item in listaCategoria)
                    {
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="categoria" id="@item.IdPerfilCargo" value="@item.IdPerfilCargo"
                                   @onchange="RadioSeleccion"
                                   checked=@(categoriaSeleccionada.Equals(item.IdPerfilCargo))>
                            <label class="form-check-label" for="@item.IdPerfilCargo">
                                @item.Descripcion
                            </label>
                        </div>

                    }
                }
                else
                {
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                }
            </div>

        </div>

    </div>

    <div class="col-sm-9">
        <div class="row gx-4 row-cols-1 row-cols-md-3 row-cols-xl-4 justify-content-start">
            @if (listaProducto != null)
            {
                foreach (var item in listaProducto)
                {
                    <div class="col mb-5">
                        <div class="card h-100">
                            <!-- Sale badge-->
                            @if (DateTime.Now < item.FechaHoraCreacion.Value.AddDays(30))
                            {
                                <div class="badge bg-primary text-white position-absolute" style="top: 0.5rem; right: 0.5rem">Nuevo</div>
                            }

                            <!-- Product details-->
                            <div class="card-body p-4">
                                <div class="text-center">
                                    <!-- Product name-->
                                    <h5 class="fw-bolder">@item.Nombre</h5>
                                    <!-- Product price-->
                                    <span>S /.@item.Valor</span>
                                    <h4>Empleador @item.EmpleoId</h4>
                                </div>
                            </div>
                            <!-- Product actions-->
                            <div class="card-footer p-3 pt-0 border-top-0 bg-transparent">
                                <div class="text-center"><a class="btn btn-outline-dark mt-auto" href="/ofertaempleo/@item.IdPropuestaEmpleo">Ver Empleo</a></div>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            }
        </div>
    </div>
</div>
@code {
    // POR HACER : QUE LA BUSQUEDA DE TODOS PUEDA BUSCAR CON DESCRIPCION TAMBIEN, BUSCA CON PERFIIL SELECCIONADA PERO CON TODOS NO
    // POR HACER : HACER QUE LAS OFERTAS SE VEAN EMPLEOS Y SERVICIOS SOLAMENTE LAS PROPUESTAS 24/FEB/2024 12:35AM
    // VOY : QUE SE DESACTIVE EN EL "EMPLEOS PUBLICOS" LOS EMPLEOS QUE SE DESACTIVAN EN "EMPLEOS" 24/FEB/2024 12:34 
    private List<PerfilCargoDTO>? listaCategoria = null;
    private List<PropuestaEmpleoDTO>? listaProducto = null;
    private string buscar = "";
    private int categoriaSeleccionada = 0;

    private async Task ObtenerPerfilesCargos(string Valor = "")
    {
        var response = await perfilcargoServicio.Lista(Valor);
        if (response.EsCorrecto)
        {
            listaCategoria = (List<PerfilCargoDTO>)response.Resultado!;
        }
        else
        {
            listaCategoria = new List<PerfilCargoDTO>();
        }
    }

    private async Task ObtenerCatalogo()
    {
        var response = await propuestaempleoServicio.Catalogo(categoriaSeleccionada, buscar);
        
        if (response.EsCorrecto)
        {
            listaProducto = (List<PropuestaEmpleoDTO>)response.Resultado!;
        }
        else
        {
            listaProducto = new List<PropuestaEmpleoDTO>();
        }
    }

    private async Task RadioSeleccion(ChangeEventArgs args)
    {
        categoriaSeleccionada = Convert.ToInt32(args.Value);
        //buscar = "";
        await ObtenerCatalogo();
    }

    protected override async Task OnInitializedAsync()
    {
        await ObtenerPerfilesCargos();
        await ObtenerCatalogo();
    }

}
