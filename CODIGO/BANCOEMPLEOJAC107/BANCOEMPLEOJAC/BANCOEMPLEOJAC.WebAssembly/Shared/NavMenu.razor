@inject ICarritoServicio carritoServicio
@inject IJacServicio jacServicio
@implements IDisposable

@inject SweetAlertService Swal;
@inject NavigationManager _navManager;
@using BANCOEMPLEOJAC.WebAssembly.Extension;
@using BANCOEMPLEOJAC.WebAssembly.Servicio.Interfase
@using CurrieTechnologies.Razor.SweetAlert2
@using Microsoft.AspNetCore.Components.Authorization;
@using System.Security.Claims;
@inject AuthenticationStateProvider autenticacionProvider;

<nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-light">
    <div class="container">
        <a class="navbar-brand" runat="server" href="#">BANCOEMPLEOJAC</a>
        <button type="button" class="navbar-toggler" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" title="Alternar navegación" aria-controls="navbarSupportedContent"
                aria-expanded="false" aria-label="Toggle navigation" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="@NavMenuCssClass navbar-collapse d-sm-inline-flex justify-content-between">
            <ul class="navbar-nav me-auto mb-2 mb-lg-0 ms-lg-4">
                <AuthorizeView Roles="1">
                    <Authorized>
                        <li class="nav-item"><NavLink class="nav-link" href="usuarios"> Usuarios</NavLink></li>
                        <li class="nav-item"><NavLink class="nav-link" href="empleos"> Empleos</NavLink></li>
                        <li class="nav-item"><NavLink class="nav-link" href="servicios"> Productos</NavLink></li>
                        <li class="nav-item"><NavLink class="nav-link" href="ofertasempleos"> Empleos<br />Público</NavLink></li>
                        <li class="nav-item"><NavLink class="nav-link" href="ofertasservicios"> Productos<br />Público</NavLink></li>
                        <li class="nav-item"><NavLink class="nav-link" href="contratosempleos"> Empleos<br />Contratados</NavLink></li>
                        <li class="nav-item"><NavLink class="nav-link" href="contratosservicios"> Productos<br />Contratados</NavLink></li>
                    </Authorized>
                </AuthorizeView>
                <AuthorizeView Roles="5">
                    <Authorized>
                        <li class="nav-item"><NavLink class="nav-link" href="empleos">Empleos</NavLink></li>
                        <li class="nav-item"><NavLink class="nav-link" href="servicios">Servicios</NavLink></li>
                        <li class="nav-item"><NavLink class="nav-link" href="ofertas"> Ofertas<br />Empleo</NavLink></li>
                        <li class="nav-item"><NavLink class="nav-link" href="ofertas"> Ofertas<br />Servicios</NavLink></li>
                    </Authorized>
                </AuthorizeView>
                <AuthorizeView>
                    <NotAuthorized>
                        <li class="nav-item"><NavLink class="nav-link" href="empleadorcomponente"> Empleadores</NavLink></li>
                        <li class="nav-item"><NavLink class="nav-link" href="empleadocomponente"> Empleados</NavLink></li>
                        <li class="nav-item"><NavLink class="nav-link" href="empleocomponente"> Empleos</NavLink></li>
                    </NotAuthorized>
                   
                </AuthorizeView>

            </ul>

            <AuthorizeView>
                <Authorized>
                    <span class="navbar-text me-3">
                        @context.User.Claims.Where(c => c.Type == ClaimTypes.Name).Select(c => c.Value).SingleOrDefault()
                        <br />
                        @context.User.Claims.Where(c => c.Type == ClaimTypes.Surname).Select(c => c.Value).SingleOrDefault()
                        <br />
                        Localidad : @context.User.Claims.Where(c => c.Type == ClaimTypes.Locality).Select(c => c.Value).SingleOrDefault()
                        @*                          Localidad : @context.User.Claims.Where(c => c.Type == ClaimTypes.StateOrProvince).Select(c => c.Value).SingleOrDefault()
                                               Localidad : @context.User.Claims.Where(c => c.Type == "NombreJac").Select(c => c.Value).SingleOrDefault()
 *@
                    </span>
                    <a class="btn btn-outline-dark ms-auto ms-md-0 me-3" href="/canasta">
                        <i class="bi-cart-fill me-1"></i>
                        Canasta
                        <span class="badge bg-dark text-white ms-1 rounded-pill">@mostrarCantidadCarrito()</span>
                    </a>

                </Authorized>
            </AuthorizeView>



            <AuthorizeView>
                <Authorized>
                    <button class="btn btn-outline-dark ms-auto ms-md-0 me-3" type="button" @onclick="CerrarSesion">Salir</button>
                </Authorized>
                <NotAuthorized>
                    <a class="btn btn-outline-dark ms-auto ms-md-0 me-3" href="/entrada">Iniciar sesion</a>
                </NotAuthorized>
            </AuthorizeView>



        </div>
    </div>
</nav>
@code {

    // VOY : QUE SE VEA EL NOMBRE DE LA JAC A LA QUE PERTENECE EL USUARIO PARA HACER FILTRO DE EMPLEOS CREADOS Y SERVICIOS CREADOS 23/FEB/2024 2:00PM

    private List<JacDTO> listaJac = new List<JacDTO>(); 

    private string Localidad { get; set; } = "";

    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override void OnInitialized()
    {

        carritoServicio.MostrarItems += StateHasChanged;
    }

    private async Task ObtenerJacs(string Valor = "")
    {
        var response = await jacServicio.Lista(Valor);

        if (response.EsCorrecto!)
        {
            listaJac = (List<JacDTO>)response.Resultado!;
        }
        else
        {
            listaJac = new List<JacDTO>();
        }
    }

    public void Dispose()
    {
        carritoServicio.MostrarItems -= StateHasChanged;
    }

    private int mostrarCantidadCarrito()
    {
        return carritoServicio.CantidadProductos();
    }

    private async Task CerrarSesion()
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Desea Salir?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Si",
                CancelButtonText = "No",
            });
        if (result.IsConfirmed)
        {
            var autenticacionExt = (AutenticacionExtension)autenticacionProvider;
            await autenticacionExt.ActualizarestadoAutenticacion(null);
            _navManager.NavigateTo("/", true);
        }
    }
}
